{"version":3,"sources":["@traceur/generated/TemplateParser/22","angular2/test/core/compiler/pipeline/text_interpolation_parser_spec.js","@traceur/generated/TemplateParser/30","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/26","@traceur/generated/TemplateParser/29","@traceur/generated/TemplateParser/28","@traceur/generated/TemplateParser/13","angular2/test/core/compiler/pipeline/@traceur/generated/TemplateParser/8","angular2/test/core/compiler/pipeline/@traceur/generated/TemplateParser/10"],"names":[],"mappings":"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","file":"angular2/test/core/compiler/pipeline/text_interpolation_parser_spec.js","sourceRoot":"/Users/jbisa/ksi/devel/angular2/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","import {describe, beforeEach, expect, it, iit, ddescribe, el} from 'angular2/test_lib';\nimport {TextInterpolationParser} from 'angular2/src/core/compiler/pipeline/text_interpolation_parser';\nimport {CompilePipeline} from 'angular2/src/core/compiler/pipeline/compile_pipeline';\nimport {MapWrapper} from 'angular2/src/facade/collection';\nimport {Lexer, Parser} from 'angular2/change_detection';\nimport {CompileElement} from 'angular2/src/core/compiler/pipeline/compile_element';\nimport {CompileStep} from 'angular2/src/core/compiler/pipeline/compile_step'\nimport {CompileControl} from 'angular2/src/core/compiler/pipeline/compile_control';\nimport {IgnoreChildrenStep} from './pipeline_spec';\n\nexport function main() {\n  describe('TextInterpolationParser', () => {\n    function createPipeline(ignoreBindings = false) {\n      return new CompilePipeline([\n        new MockStep((parent, current, control) => { current.ignoreBindings = ignoreBindings; }),\n        new IgnoreChildrenStep(),\n        new TextInterpolationParser(new Parser(new Lexer()))\n      ]);\n    }\n\n    it('should not look for text interpolation when ignoreBindings is true', () => {\n      var results = createPipeline(true).process(el('<div>{{expr1}}<span></span>{{expr2}}</div>'));\n      expect(results[0].textNodeBindings).toBe(null);\n    });\n\n    it('should find text interpolation in normal elements', () => {\n      var results = createPipeline().process(el('<div>{{expr1}}<span></span>{{expr2}}</div>'));\n      var bindings = results[0].textNodeBindings;\n      expect(MapWrapper.get(bindings, 0).source).toEqual(\"{{expr1}}\");\n      expect(MapWrapper.get(bindings, 2).source).toEqual(\"{{expr2}}\");\n    });\n\n    it('should find text interpolation in template elements', () => {\n      var results = createPipeline().process(el('<template>{{expr1}}<span></span>{{expr2}}</template>'));\n      var bindings = results[0].textNodeBindings;\n      expect(MapWrapper.get(bindings, 0).source).toEqual(\"{{expr1}}\");\n      expect(MapWrapper.get(bindings, 2).source).toEqual(\"{{expr2}}\");\n    });\n\n    it('should allow multiple expressions', () => {\n      var results = createPipeline().process(el('<div>{{expr1}}{{expr2}}</div>'));\n      var bindings = results[0].textNodeBindings;\n      expect(MapWrapper.get(bindings, 0).source).toEqual(\"{{expr1}}{{expr2}}\");\n    });\n\n    it('should not interpolate when compileChildren is false', () => {\n      var results = createPipeline().process(el('<div>{{included}}<span ignore-children>{{excluded}}</span></div>'));\n      var bindings = results[0].textNodeBindings;\n      expect(MapWrapper.get(bindings, 0).source).toEqual(\"{{included}}\");\n      expect(results[1].textNodeBindings).toBe(null);\n    });\n\n    it('should allow fixed text before, in between and after expressions', () => {\n      var results = createPipeline().process(el('<div>a{{expr1}}b{{expr2}}c</div>'));\n      var bindings = results[0].textNodeBindings;\n      expect(MapWrapper.get(bindings, 0).source).toEqual(\"a{{expr1}}b{{expr2}}c\");\n    });\n\n    it('should escape quotes in fixed parts', () => {\n      var results = createPipeline().process(el(\"<div>'\\\"a{{expr1}}</div>\"));\n      expect(MapWrapper.get(results[0].textNodeBindings, 0).source).toEqual(\"'\\\"a{{expr1}}\");\n    });\n  });\n}\n\nclass MockStep extends CompileStep {\n  processClosure:Function;\n  constructor(process) {\n    super();\n    this.processClosure = process;\n  }\n  process(parent:CompileElement, current:CompileElement, control:CompileControl) {\n    this.processClosure(parent, current, control);\n  }\n}\n","\n        $__export($__placeholder__0, $__placeholder__1)\n      ","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","$__placeholder__0 = $__placeholder__1","function($__super) {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4, $__super);\n        }($__placeholder__5)","$traceurRuntime.superConstructor($__placeholder__0).call($__placeholder__1)","assert.argumentTypes($__placeholder__0)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});"]}