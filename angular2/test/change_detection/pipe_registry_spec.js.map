{"version":3,"sources":["@traceur/generated/TemplateParser/22","angular2/test/change_detection/pipe_registry_spec.js","@traceur/generated/TemplateParser/30","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/26","@traceur/generated/TemplateParser/29","@traceur/generated/TemplateParser/27","angular2/test/change_detection/@traceur/generated/TemplateParser/8","angular2/test/change_detection/@traceur/generated/TemplateParser/7","angular2/test/change_detection/@traceur/generated/TemplateParser/9","angular2/test/change_detection/@traceur/generated/TemplateParser/10"],"names":[],"mappings":"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","file":"angular2/test/change_detection/pipe_registry_spec.js","sourceRoot":"/Users/jbisa/ksi/devel/angular2/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","import {ddescribe, describe, it, iit, xit, expect, beforeEach, afterEach} from 'angular2/test_lib';\n\nimport {PipeRegistry} from 'angular2/src/change_detection/pipes/pipe_registry';\nimport {Pipe} from 'angular2/src/change_detection/pipes/pipe';\n\nexport function main() {\n  describe(\"pipe registry\", () => {\n    var firstPipe = new Pipe();\n    var secondPipe = new Pipe();\n\n    it(\"should return the first pipe supporting the data type\", () => {\n      var r = new PipeRegistry({\n        \"type\": [\n          new PipeFactory(false, firstPipe),\n          new PipeFactory(true, secondPipe)\n        ]\n      });\n\n      expect(r.get(\"type\", \"some object\")).toBe(secondPipe);\n    });\n\n    it(\"should throw when no matching type\", () => {\n      var r = new PipeRegistry({});\n      expect(() => r.get(\"unknown\", \"some object\")).toThrowError(\n        `Cannot find a pipe for type 'unknown' object 'some object'`\n      );\n    });\n\n    it(\"should throw when no matching pipe\", () => {\n      var r = new PipeRegistry({\n        \"type\" : []\n      });\n\n      expect(() => r.get(\"type\", \"some object\")).toThrowError(\n        `Cannot find a pipe for type 'type' object 'some object'`\n      );\n    });\n  });\n}\n\nclass PipeFactory {\n  shouldSupport:boolean;\n  pipe:any;\n\n  constructor(shouldSupport:boolean, pipe:any) {\n    this.shouldSupport = shouldSupport;\n    this.pipe = pipe;\n  }\n\n  supports(obj):boolean {\n    return this.shouldSupport;\n  }\n\n  create():Pipe {\n    return this.pipe;\n  }\n}","\n        $__export($__placeholder__0, $__placeholder__1)\n      ","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","$__placeholder__0 = $__placeholder__1","function() {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4);\n        }()","assert.argumentTypes($__placeholder__0)","assert.type.$__placeholder__0)","return assert.returnType(($__placeholder__0), $__placeholder__1)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});"]}