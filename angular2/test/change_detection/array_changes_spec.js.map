{"version":3,"sources":["@traceur/generated/TemplateParser/22","angular2/test/change_detection/array_changes_spec.js","@traceur/generated/TemplateParser/30","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/26"],"names":[],"mappings":"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","file":"angular2/test/change_detection/array_changes_spec.js","sourceRoot":"/Users/jbisa/ksi/devel/angular2/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","import {describe, it, iit, xit, expect, beforeEach, afterEach} from 'angular2/test_lib';\nimport {ArrayChanges} from 'angular2/src/change_detection/pipes/array_changes';\n\nimport {NumberWrapper} from 'angular2/src/facade/lang';\nimport {ListWrapper, MapWrapper} from 'angular2/src/facade/collection';\n\nimport {TestIterable} from './iterable';\nimport {arrayChangesAsString} from './util';\n\n// todo(vicb): UnmodifiableListView / frozen object when implemented\nexport function main() {\n  describe('collection_changes', function() {\n    describe('CollectionChanges', function() {\n      var changes;\n      var l;\n\n      beforeEach(() => {\n        changes = new ArrayChanges();\n      });\n\n      afterEach(() => {\n        changes = null;\n      });\n\n      it('should support list and iterables', () => {\n        expect(ArrayChanges.supportsObj([])).toBeTruthy();\n        expect(ArrayChanges.supportsObj(new TestIterable())).toBeTruthy();\n        expect(ArrayChanges.supportsObj(MapWrapper.create())).toBeFalsy();\n        expect(ArrayChanges.supportsObj(null)).toBeFalsy();\n      });\n\n      it('should support iterables', () => {\n        l = new TestIterable();\n\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: []\n        }));\n\n        l.list = [1];\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['1[null->0]'],\n          additions: ['1[null->0]']\n        }));\n\n        l.list = [2, 1];\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['2[null->0]', '1[0->1]'],\n          previous: ['1[0->1]'],\n          additions: ['2[null->0]'],\n          moves: ['1[0->1]']\n        }));\n      });\n\n      it('should detect additions', () => {\n        l = [];\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: []\n        }));\n\n        ListWrapper.push(l, 'a');\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['a[null->0]'],\n          additions: ['a[null->0]']\n        }));\n\n        ListWrapper.push(l, 'b');\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['a', 'b[null->1]'],\n          previous: ['a'],\n          additions: ['b[null->1]']\n        }));\n      });\n\n      it('should support changing the reference', () => {\n        l = [0];\n        changes.check(l);\n\n        l = [1, 0];\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['1[null->0]', '0[0->1]'],\n          previous: ['0[0->1]'],\n          additions: ['1[null->0]'],\n          moves: ['0[0->1]']\n        }));\n\n        l = [2, 1, 0];\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['2[null->0]', '1[0->1]', '0[1->2]'],\n          previous: ['1[0->1]', '0[1->2]'],\n          additions: ['2[null->0]'],\n          moves: ['1[0->1]', '0[1->2]']\n        }));\n      });\n\n      it('should handle swapping element', () => {\n        l = [1, 2];\n        changes.check(l);\n\n        ListWrapper.clear(l);\n        ListWrapper.push(l, 2);\n        ListWrapper.push(l, 1);\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['2[1->0]', '1[0->1]'],\n          previous: ['1[0->1]', '2[1->0]'],\n          moves: ['2[1->0]', '1[0->1]']\n        }));\n      });\n\n      it('should handle swapping element', () => {\n        l = ['a', 'b', 'c'];\n        changes.check(l);\n\n        ListWrapper.removeAt(l, 1);\n        ListWrapper.insert(l, 0, 'b');\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['b[1->0]', 'a[0->1]', 'c'],\n          previous: ['a[0->1]', 'b[1->0]', 'c'],\n          moves: ['b[1->0]', 'a[0->1]']\n        }));\n\n        ListWrapper.removeAt(l, 1);\n        ListWrapper.push(l, 'a');\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['b', 'c[2->1]', 'a[1->2]'],\n          previous: ['b', 'a[1->2]', 'c[2->1]'],\n          moves: ['c[2->1]', 'a[1->2]']\n        }));\n      });\n\n      it('should detect changes in list', () => {\n        l = [];\n        changes.check(l);\n\n        ListWrapper.push(l, 'a');\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['a[null->0]'],\n          additions: ['a[null->0]']\n        }));\n\n        ListWrapper.push(l, 'b');\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['a', 'b[null->1]'],\n          previous: ['a'],\n          additions: ['b[null->1]']\n        }));\n\n        ListWrapper.push(l, 'c');\n        ListWrapper.push(l, 'd');\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['a', 'b', 'c[null->2]', 'd[null->3]'],\n          previous: ['a', 'b'],\n          additions: ['c[null->2]', 'd[null->3]']\n        }));\n\n        ListWrapper.removeAt(l, 2);\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['a', 'b', 'd[3->2]'],\n          previous: ['a', 'b', 'c[2->null]', 'd[3->2]'],\n          moves: ['d[3->2]'],\n          removals: ['c[2->null]']\n        }));\n\n        ListWrapper.clear(l);\n        ListWrapper.push(l, 'd');\n        ListWrapper.push(l, 'c');\n        ListWrapper.push(l, 'b');\n        ListWrapper.push(l, 'a');\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['d[2->0]', 'c[null->1]', 'b[1->2]', 'a[0->3]'],\n          previous: ['a[0->3]', 'b[1->2]', 'd[2->0]'],\n          additions: ['c[null->1]'],\n          moves: ['d[2->0]', 'b[1->2]', 'a[0->3]']\n        }));\n      });\n\n      it('should test string by value rather than by reference (Dart)', () => {\n        l = ['a', 'boo'];\n        changes.check(l);\n\n        var b = 'b';\n        var oo = 'oo';\n        ListWrapper.set(l, 1, b + oo);\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['a', 'boo'],\n          previous: ['a', 'boo']\n        }));\n      });\n\n      it('should ignore [NaN] != [NaN] (JS)', () => {\n        l = [NumberWrapper.NaN];\n        changes.check(l);\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: [NumberWrapper.NaN],\n          previous: [NumberWrapper.NaN]\n        }));\n      });\n\n      it('should detect [NaN] moves', () => {\n        l = [NumberWrapper.NaN, NumberWrapper.NaN];\n        changes.check(l);\n\n        ListWrapper.insert(l, 0, 'foo');\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n            collection: ['foo[null->0]', 'NaN[0->1]', 'NaN[1->2]'],\n            previous: ['NaN[0->1]', 'NaN[1->2]'],\n            additions: ['foo[null->0]'],\n            moves: ['NaN[0->1]', 'NaN[1->2]']}\n        ));\n      });\n\n      it('should remove and add same item', () => {\n        l = ['a', 'b', 'c'];\n        changes.check(l);\n\n        ListWrapper.removeAt(l, 1);\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['a', 'c[2->1]'],\n          previous: ['a', 'b[1->null]', 'c[2->1]'],\n          moves: ['c[2->1]'],\n          removals: ['b[1->null]']\n        }));\n\n        ListWrapper.insert(l, 1, 'b');\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['a', 'b[null->1]', 'c[1->2]'],\n          previous: ['a', 'c[1->2]'],\n          additions: ['b[null->1]'],\n          moves: ['c[1->2]']\n        }));\n      });\n\n      it('should support duplicates', () => {\n        l = ['a', 'a', 'a', 'b', 'b'];\n        changes.check(l);\n\n        ListWrapper.removeAt(l, 0);\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['a', 'a', 'b[3->2]', 'b[4->3]'],\n          previous: ['a', 'a', 'a[2->null]', 'b[3->2]', 'b[4->3]'],\n          moves: ['b[3->2]', 'b[4->3]'],\n          removals: ['a[2->null]']\n        }));\n      });\n\n      it('should support insertions/moves', () => {\n        l = ['a', 'a', 'b', 'b'];\n        changes.check(l);\n\n        ListWrapper.insert(l, 0, 'b');\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['b[2->0]', 'a[0->1]', 'a[1->2]', 'b', 'b[null->4]'],\n          previous: ['a[0->1]', 'a[1->2]', 'b[2->0]', 'b'],\n          additions: ['b[null->4]'],\n          moves: ['b[2->0]', 'a[0->1]', 'a[1->2]']\n        }));\n      });\n\n      it('should not report unnecessary moves', () => {\n        l = ['a', 'b', 'c'];\n        changes.check(l);\n\n        ListWrapper.clear(l);\n        ListWrapper.push(l, 'b');\n        ListWrapper.push(l, 'a');\n        ListWrapper.push(l, 'c');\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['b[1->0]', 'a[0->1]', 'c'],\n          previous: ['a[0->1]', 'b[1->0]', 'c'],\n          moves: ['b[1->0]', 'a[0->1]']\n        }));\n      });\n    });\n  });\n}\n\n","\n        $__export($__placeholder__0, $__placeholder__1)\n      ","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;"]}