{"version":3,"sources":["@traceur/generated/TemplateParser/22","angular2/test/change_detection/parser/lexer_spec.js","angular2/test/change_detection/parser/@traceur/generated/TemplateParser/8","angular2/test/change_detection/parser/@traceur/generated/TemplateParser/7","angular2/test/change_detection/parser/@traceur/generated/TemplateParser/9","angular2/test/change_detection/parser/@traceur/generated/TemplateParser/389","angular2/test/change_detection/parser/@traceur/generated/TemplateParser/25","@traceur/generated/TemplateParser/30","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/26","angular2/test/change_detection/parser/@traceur/generated/TemplateParser/10"],"names":[],"mappings":"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","file":"angular2/test/change_detection/parser/lexer_spec.js","sourceRoot":"/Users/jbisa/ksi/devel/angular2/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","import {describe, it, expect} from 'angular2/test_lib';\n\nimport {Lexer, Token} from 'angular2/src/change_detection/parser/lexer';\n\nimport {List, ListWrapper} from \"angular2/src/facade/collection\";\nimport {StringWrapper, int} from \"angular2/src/facade/lang\";\n\nfunction lex(text:string):List {\n  return new Lexer().tokenize(text);\n}\n\nfunction expectToken(token, index) {\n  expect(token instanceof Token).toBe(true);\n  expect(token.index).toEqual(index);\n}\n\nfunction expectCharacterToken(token, index, character) {\n  expect(character.length).toBe(1);\n  expectToken(token, index);\n  expect(token.isCharacter(StringWrapper.charCodeAt(character, 0))).toBe(true);\n}\n\nfunction expectOperatorToken(token, index, operator) {\n  expectToken(token, index);\n  expect(token.isOperator(operator)).toBe(true);\n}\n\nfunction expectNumberToken(token, index, n) {\n  expectToken(token, index);\n  expect(token.isNumber()).toBe(true);\n  expect(token.toNumber()).toEqual(n);\n}\n\nfunction expectStringToken(token, index, str) {\n  expectToken(token, index);\n  expect(token.isString()).toBe(true);\n  expect(token.toString()).toEqual(str);\n}\n\nfunction expectIdentifierToken(token, index, identifier) {\n  expectToken(token, index);\n  expect(token.isIdentifier()).toBe(true);\n  expect(token.toString()).toEqual(identifier);\n}\n\nfunction expectKeywordToken(token, index, keyword) {\n  expectToken(token, index);\n  expect(token.isKeyword()).toBe(true);\n  expect(token.toString()).toEqual(keyword);\n}\n\nexport function main() {\n  describe('lexer', function() {\n    describe('token', function() {\n      it('should tokenize a simple identifier', function() {\n        var tokens:List<int> = lex(\"j\");\n        expect(tokens.length).toEqual(1);\n        expectIdentifierToken(tokens[0], 0, 'j');\n      });\n\n      it('should tokenize a dotted identifier', function() {\n        var tokens:List<int> = lex(\"j.k\");\n        expect(tokens.length).toEqual(3);\n        expectIdentifierToken(tokens[0], 0, 'j');\n        expectCharacterToken (tokens[1], 1, '.');\n        expectIdentifierToken(tokens[2], 2, 'k');\n      });\n\n      it('should tokenize an operator', function() {\n        var tokens:List<int> = lex(\"j-k\");\n        expect(tokens.length).toEqual(3);\n        expectOperatorToken(tokens[1], 1, '-');\n      });\n\n      it('should tokenize an indexed operator', function() {\n        var tokens:List<int> = lex(\"j[k]\");\n        expect(tokens.length).toEqual(4);\n        expectCharacterToken(tokens[1], 1, \"[\");\n        expectCharacterToken(tokens[3], 3, \"]\");\n      });\n\n      it('should tokenize numbers', function() {\n        var tokens:List<int> = lex(\"88\");\n        expect(tokens.length).toEqual(1);\n        expectNumberToken(tokens[0], 0, 88);\n      });\n\n      it('should tokenize numbers within index ops', function() {\n        expectNumberToken(lex(\"a[22]\")[2], 2, 22);\n      });\n\n      it('should tokenize simple quoted strings', function() {\n        expectStringToken(lex('\"a\"')[0], 0, \"a\");\n      });\n\n      it('should tokenize quoted strings with escaped quotes', function() {\n        expectStringToken(lex('\"a\\\\\"\"')[0], 0, 'a\"');\n      });\n\n      it('should tokenize a string', function() {\n        var tokens:List<Token> = lex(\"j-a.bc[22]+1.3|f:'a\\\\\\'c':\\\"d\\\\\\\"e\\\"\");\n        expectIdentifierToken(tokens[0], 0, 'j');\n        expectOperatorToken(tokens[1], 1, '-');\n        expectIdentifierToken(tokens[2], 2, 'a');\n        expectCharacterToken(tokens[3], 3, '.');\n        expectIdentifierToken(tokens[4], 4, 'bc');\n        expectCharacterToken(tokens[5], 6, '[');\n        expectNumberToken(tokens[6], 7, 22);\n        expectCharacterToken(tokens[7], 9, ']');\n        expectOperatorToken(tokens[8], 10, '+');\n        expectNumberToken(tokens[9], 11, 1.3);\n        expectOperatorToken(tokens[10], 14, '|');\n        expectIdentifierToken(tokens[11], 15, 'f');\n        expectCharacterToken(tokens[12], 16, ':');\n        expectStringToken(tokens[13], 17, \"a'c\");\n        expectCharacterToken(tokens[14], 23, ':');\n        expectStringToken(tokens[15], 24, 'd\"e');\n      });\n\n      it('should tokenize undefined', function() {\n        var tokens:List<Token> = lex(\"undefined\");\n        expectKeywordToken(tokens[0], 0, \"undefined\");\n        expect(tokens[0].isKeywordUndefined()).toBe(true);\n      });\n\n      it('should ignore whitespace', function() {\n        var tokens:List<Token> = lex(\"a \\t \\n \\r b\");\n        expectIdentifierToken(tokens[0], 0, 'a');\n        expectIdentifierToken(tokens[1], 8, 'b');\n      });\n\n      it('should tokenize quoted string', function() {\n        var str = \"['\\\\'', \\\"\\\\\\\"\\\"]\";\n        var tokens:List<Token> = lex(str);\n        expectStringToken(tokens[1], 1, \"'\");\n        expectStringToken(tokens[3], 7, '\"');\n      });\n\n      it('should tokenize escaped quoted string', function() {\n        var str = '\"\\\\\"\\\\n\\\\f\\\\r\\\\t\\\\v\\\\u00A0\"';\n        var tokens:List<Token> = lex(str);\n        expect(tokens.length).toEqual(1);\n        expect(tokens[0].toString()).toEqual('\"\\n\\f\\r\\t\\v\\u00A0');\n      });\n\n      it('should tokenize unicode', function() {\n        var tokens:List<Token> = lex('\"\\\\u00A0\"');\n        expect(tokens.length).toEqual(1);\n        expect(tokens[0].toString()).toEqual('\\u00a0');\n      });\n\n      it('should tokenize relation', function() {\n        var tokens:List<Token> = lex(\"! == != < > <= >=\");\n        expectOperatorToken(tokens[0], 0, '!');\n        expectOperatorToken(tokens[1], 2, '==');\n        expectOperatorToken(tokens[2], 5, '!=');\n        expectOperatorToken(tokens[3], 8, '<');\n        expectOperatorToken(tokens[4], 10, '>');\n        expectOperatorToken(tokens[5], 12, '<=');\n        expectOperatorToken(tokens[6], 15, '>=');\n      });\n\n      it('should tokenize statements', function() {\n        var tokens:List<Token> = lex(\"a;b;\");\n        expectIdentifierToken(tokens[0], 0, 'a');\n        expectCharacterToken(tokens[1], 1, ';');\n        expectIdentifierToken(tokens[2], 2, 'b');\n        expectCharacterToken(tokens[3], 3, ';');\n      });\n\n      it('should tokenize function invocation', function() {\n        var tokens:List<Token> = lex(\"a()\");\n        expectIdentifierToken(tokens[0], 0, 'a');\n        expectCharacterToken(tokens[1], 1, '(');\n        expectCharacterToken(tokens[2], 2, ')');\n      });\n\n      it('should tokenize simple method invocations', function() {\n        var tokens:List<Token> = lex(\"a.method()\");\n        expectIdentifierToken(tokens[2], 2, 'method');\n      });\n\n      it('should tokenize method invocation', function() {\n        var tokens:List<Token> = lex(\"a.b.c (d) - e.f()\");\n        expectIdentifierToken(tokens[0], 0, 'a');\n        expectCharacterToken(tokens[1], 1, '.');\n        expectIdentifierToken(tokens[2], 2, 'b');\n        expectCharacterToken(tokens[3], 3, '.');\n        expectIdentifierToken(tokens[4], 4, 'c');\n        expectCharacterToken(tokens[5], 6, '(');\n        expectIdentifierToken(tokens[6], 7, 'd');\n        expectCharacterToken(tokens[7], 8, ')');\n        expectOperatorToken(tokens[8], 10, '-');\n        expectIdentifierToken(tokens[9], 12, 'e');\n        expectCharacterToken(tokens[10], 13, '.');\n        expectIdentifierToken(tokens[11], 14, 'f');\n        expectCharacterToken(tokens[12], 15, '(');\n        expectCharacterToken(tokens[13], 16, ')');\n      });\n\n      it('should tokenize number', function() {\n        var tokens:List<Token> = lex(\"0.5\");\n        expectNumberToken(tokens[0], 0, 0.5);\n      });\n\n      // NOTE(deboer): NOT A LEXER TEST\n      //    it('should tokenize negative number', function() {\n      //      var tokens:List<Token> = lex(\"-0.5\");\n      //      expectNumberToken(tokens[0], 0, -0.5);\n      //    });\n\n      it('should tokenize number with exponent', function() {\n        var tokens:List<Token> = lex(\"0.5E-10\");\n        expect(tokens.length).toEqual(1);\n        expectNumberToken(tokens[0], 0, 0.5E-10);\n        tokens = lex(\"0.5E+10\");\n        expectNumberToken(tokens[0], 0, 0.5E+10);\n      });\n\n      it('should throws exception for invalid exponent', function() {\n        expect(function() {\n          lex(\"0.5E-\");\n        }).toThrowError('Lexer Error: Invalid exponent at column 4 in expression [0.5E-]');\n\n        expect(function() {\n          lex(\"0.5E-A\");\n        }).toThrowError('Lexer Error: Invalid exponent at column 4 in expression [0.5E-A]');\n      });\n\n      it('should tokenize number starting with a dot', function() {\n        var tokens:List<Token> = lex(\".5\");\n        expectNumberToken(tokens[0], 0, 0.5);\n      });\n\n      it('should throw error on invalid unicode', function() {\n        expect(function() {\n          lex(\"'\\\\u1''bla'\");\n        }).toThrowError(\"Lexer Error: Invalid unicode escape [\\\\u1''b] at column 2 in expression ['\\\\u1''bla']\");\n      });\n\n      it('should tokenize hash as operator', function() {\n        var tokens:List<Token> = lex(\"#\");\n        expectOperatorToken(tokens[0], 0, '#');\n      });\n\n    });\n  });\n}\n","assert.argumentTypes($__placeholder__0)","assert.type.$__placeholder__0)","return assert.returnType(($__placeholder__0), $__placeholder__1)","assert.type($__placeholder__0, $__placeholder__1)","assert.genericType($__placeholder__0)","\n        $__export($__placeholder__0, $__placeholder__1)\n      ","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});"]}