{"version":3,"sources":["@traceur/generated/TemplateParser/22","angular2/test/forms/form_builder_spec.js","@traceur/generated/TemplateParser/30","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/26","@traceur/generated/TemplateParser/38"],"names":[],"mappings":"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","file":"angular2/test/forms/form_builder_spec.js","sourceRoot":"/Users/jbisa/ksi/devel/angular2/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","import {ddescribe, describe, it, iit, xit, expect, beforeEach, afterEach, el} from 'angular2/test_lib';\nimport {Control, FormBuilder} from 'angular2/forms';\nimport * as validations from 'angular2/forms';\n\nexport function main() {\n  describe(\"Form Builder\", () => {\n    var b;\n\n    beforeEach(() => {\n      b = new FormBuilder();\n    });\n\n    it(\"should create controls from a value\", () => {\n      var g = b.group({\n        \"login\": \"some value\"\n      });\n\n      expect(g.controls[\"login\"].value).toEqual(\"some value\");\n    });\n\n    it(\"should create controls from an array\", () => {\n      var g = b.group({\n        \"login\": [\"some value\"],\n        \"password\": [\"some value\", validations.required]\n      });\n\n      expect(g.controls[\"login\"].value).toEqual(\"some value\");\n      expect(g.controls[\"password\"].value).toEqual(\"some value\");\n      expect(g.controls[\"password\"].validator).toEqual(validations.required);\n    });\n\n    it(\"should use controls\", () => {\n      var g = b.group({\n        \"login\": b.control(\"some value\", validations.required)\n      });\n\n      expect(g.controls[\"login\"].value).toEqual(\"some value\");\n      expect(g.controls[\"login\"].validator).toBe(validations.required);\n    });\n\n    it(\"should create groups with optional controls\", () => {\n      var g = b.group({\n        \"login\": \"some value\"\n      }, {\"optionals\": {\"login\" : false}});\n\n      expect(g.contains(\"login\")).toEqual(false);\n    });\n\n    it(\"should create groups with a custom validator\", () => {\n      var g = b.group({\n        \"login\": \"some value\"\n      }, {\"validator\": validations.nullValidator});\n\n      expect(g.validator).toBe(validations.nullValidator);\n    });\n\n    it(\"should use default validators when no validators are provided\", () => {\n      var g = b.group({\n        \"login\": \"some value\"\n      });\n      expect(g.controls[\"login\"].validator).toBe(validations.nullValidator);\n      expect(g.validator).toBe(validations.controlGroupValidator);\n    });\n  });\n}","\n        $__export($__placeholder__0, $__placeholder__1)\n      ","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","$__placeholder__0 = $__m;"]}