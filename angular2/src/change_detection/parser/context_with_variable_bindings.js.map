{"version":3,"sources":["@traceur/generated/TemplateParser/22","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/26","@traceur/generated/TemplateParser/23","@traceur/generated/TemplateParser/27","angular2/src/change_detection/parser/context_with_variable_bindings.js","angular2/src/change_detection/parser/@traceur/generated/TemplateParser/8","angular2/src/change_detection/parser/@traceur/generated/TemplateParser/7","angular2/src/change_detection/parser/@traceur/generated/TemplateParser/9","angular2/src/change_detection/parser/@traceur/generated/TemplateParser/2971","angular2/src/change_detection/parser/@traceur/generated/TemplateParser/10"],"names":[],"mappings":"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","file":"angular2/src/change_detection/parser/context_with_variable_bindings.js","sourceRoot":"/Users/jbisa/ksi/devel/angular2/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","var $__placeholder__0 = $__export($__placeholder__1, $__placeholder__2);","function() {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4);\n        }()","import {MapWrapper} from 'angular2/src/facade/collection';\nimport {BaseException} from 'angular2/src/facade/lang';\n\nexport class ContextWithVariableBindings {\n  parent:any;\n  /// varBindings' keys are read-only. adding/removing keys is not supported.\n  varBindings:Map;\n\n  constructor(parent:any, varBindings:Map) {\n    this.parent = parent;\n    this.varBindings = varBindings;\n  }\n\n  hasBinding(name:string):boolean {\n    return MapWrapper.contains(this.varBindings, name);\n  }\n\n  get(name:string) {\n    return MapWrapper.get(this.varBindings, name);\n  }\n\n  set(name:string, value) {\n    // TODO(rado): consider removing this check if we can guarantee this is not\n    // exposed to the public API.\n    if (this.hasBinding(name)) {\n      MapWrapper.set(this.varBindings, name, value);\n    } else {\n      throw new BaseException(\n        'VariableBindings do not support setting of new keys post-construction.');\n    }\n  }\n\n  clearValues() {\n    MapWrapper.clearValues(this.varBindings);\n  }\n}\n","assert.argumentTypes($__placeholder__0)","assert.type.$__placeholder__0)","return assert.returnType(($__placeholder__0), $__placeholder__1)","assert.type.any","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});"]}