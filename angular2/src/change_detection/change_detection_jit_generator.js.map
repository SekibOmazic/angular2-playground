{"version":3,"sources":["@traceur/generated/TemplateParser/22","angular2/src/change_detection/change_detection_jit_generator.es6","angular2/src/change_detection/@traceur/generated/TemplateParser/8","angular2/src/change_detection/@traceur/generated/TemplateParser/7","angular2/src/change_detection/@traceur/generated/TemplateParser/9","angular2/src/change_detection/@traceur/generated/TemplateParser/10","angular2/src/change_detection/change_detection_jit_generator.js","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/26","@traceur/generated/TemplateParser/23","@traceur/generated/TemplateParser/27","angular2/src/change_detection/@traceur/generated/TemplateParser/25"],"names":[],"mappings":"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","file":"angular2/src/change_detection/change_detection_jit_generator.js","sourceRoot":"/Users/jbisa/ksi/devel/angular2/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","import {isPresent, isBlank, BaseException, Type} from 'angular2/src/facade/lang';\nimport {List, ListWrapper, MapWrapper, StringMapWrapper} from 'angular2/src/facade/collection';\n\nimport {ContextWithVariableBindings} from './parser/context_with_variable_bindings';\nimport {AbstractChangeDetector} from './abstract_change_detector';\nimport {ChangeDetectionUtil} from './change_detection_util';\n\nimport {\n  ProtoRecord,\n  RECORD_TYPE_SELF,\n  RECORD_TYPE_PROPERTY,\n  RECORD_TYPE_INVOKE_METHOD,\n  RECORD_TYPE_CONST,\n  RECORD_TYPE_INVOKE_CLOSURE,\n  RECORD_TYPE_PRIMITIVE_OP,\n  RECORD_TYPE_KEYED_ACCESS,\n  RECORD_TYPE_PIPE,\n  RECORD_TYPE_INTERPOLATE\n  } from './proto_record';\n\n/**\n * The code generator takes a list of proto records and creates a function/class\n * that \"emulates\" what the developer would write by hand to implement the same\n * kind of behaviour.\n *\n * For example: An expression `address.city` will result in the following class:\n *\n * var ChangeDetector0 = function ChangeDetector0(dispatcher, protos) {\n *   AbstractChangeDetector.call(this);\n *   this.dispatcher = dispatcher;\n *   this.protos = protos;\n *\n *   this.context = ChangeDetectionUtil.unitialized();\n *   this.address0 = ChangeDetectionUtil.unitialized();\n *   this.city1 = ChangeDetectionUtil.unitialized();\n * }\n * ChangeDetector0.prototype = Object.create(AbstractChangeDetector.prototype);\n *\n * ChangeDetector0.prototype.detectChangesInRecords = function(throwOnChange) {\n *   var address0;\n *   var city1;\n *   var change;\n *   var changes = null;\n *   var temp;\n *   var context = this.context;\n *\n *   temp = ChangeDetectionUtil.findContext(\"address\", context);\n *   if (temp instanceof ContextWithVariableBindings) {\n *     address0 = temp.get('address');\n *   } else {\n *     address0 = temp.address;\n *   }\n *\n *   if (address0 !== this.address0) {\n *     this.address0 = address0;\n *   }\n *\n *   city1 = address0.city;\n *   if (city1 !== this.city1) {\n *     changes = ChangeDetectionUtil.addRecord(changes,\n *       ChangeDetectionUtil.simpleChangeRecord(this.protos[1].bindingMemento, this.city1, city1));\n *     this.city1 = city1;\n *   }\n *\n *   if (changes.length > 0) {\n *     if(throwOnChange) ChangeDetectionUtil.throwOnChange(this.protos[1], changes[0]);\n *     this.dispatcher.onRecordChange('address.city', changes);\n *     changes = null;\n *   }\n * }\n *\n *\n * ChangeDetector0.prototype.hydrate = function(context) {\n *   this.context = context;\n * }\n *\n * ChangeDetector0.prototype.dehydrate = function(context) {\n *   this.context = ChangeDetectionUtil.unitialized();\n *   this.address0 = ChangeDetectionUtil.unitialized();\n *   this.city1 = ChangeDetectionUtil.unitialized();\n * }\n *\n * ChangeDetector0.prototype.hydrated = function() {\n *   return this.context !== ChangeDetectionUtil.unitialized();\n * }\n *\n * return ChangeDetector0;\n *\n *\n * The only thing the generated class depends on is the super class AbstractChangeDetector.\n *\n * The implementation comprises two parts:\n * * ChangeDetectorJITGenerator has the logic of how everything fits together.\n * * template functions (e.g., constructorTemplate) define what code is generated.\n*/\n\nvar ABSTRACT_CHANGE_DETECTOR = \"AbstractChangeDetector\";\nvar UTIL = \"ChangeDetectionUtil\";\nvar DISPATCHER_ACCESSOR = \"this.dispatcher\";\nvar PIPE_REGISTRY_ACCESSOR = \"this.pipeRegistry\";\nvar PROTOS_ACCESSOR = \"this.protos\";\nvar CHANGE_LOCAL = \"change\";\nvar CHANGES_LOCAL = \"changes\";\nvar TEMP_LOCAL = \"temp\";\n\nfunction typeTemplate(type:string, cons:string, detectChanges:string, setContext:string):string {\n  return `\n${cons}\n${detectChanges}\n${setContext};\n\nreturn function(dispatcher, pipeRegistry) {\n  return new ${type}(dispatcher, pipeRegistry, protos);\n}\n`;\n}\n\nfunction constructorTemplate(type:string, fieldsDefinitions:string):string {\n  return `\nvar ${type} = function ${type}(dispatcher, pipeRegistry, protos) {\n${ABSTRACT_CHANGE_DETECTOR}.call(this);\n${DISPATCHER_ACCESSOR} = dispatcher;\n${PIPE_REGISTRY_ACCESSOR} = pipeRegistry;\n${PROTOS_ACCESSOR} = protos;\n${fieldsDefinitions}\n}\n\n${type}.prototype = Object.create(${ABSTRACT_CHANGE_DETECTOR}.prototype);\n`;\n}\n\nfunction pipeOnDestroyTemplate(pipeNames:List) {\n  return pipeNames.map((p) => `${p}.onDestroy()`).join(\"\\n\");\n}\n\nfunction hydrateTemplate(type:string, fieldsDefinitions:string, pipeOnDestroy:string):string {\n  return `\n${type}.prototype.hydrate = function(context) {\n  this.context = context;\n}\n${type}.prototype.dehydrate = function() {\n  ${pipeOnDestroy}\n  ${fieldsDefinitions}\n}\n${type}.prototype.hydrated = function() {\n  return this.context !== ${UTIL}.unitialized();\n}\n`;\n}\n\nfunction detectChangesTemplate(type:string, body:string):string {\n  return `\n${type}.prototype.detectChangesInRecords = function(throwOnChange) {\n  ${body}\n}\n`;\n}\n\n\nfunction bodyTemplate(localDefinitions:string, changeDefinitions:string, records:string):string {\n  return `\n${localDefinitions}\n${changeDefinitions}\nvar ${TEMP_LOCAL};\nvar ${CHANGE_LOCAL};\nvar ${CHANGES_LOCAL} = null;\n\ncontext = this.context;\n${records}\n`;\n}\n\nfunction notifyTemplate(index:number):string{\n  return  `\nif (${CHANGES_LOCAL} && ${CHANGES_LOCAL}.length > 0) {\n  if(throwOnChange) ${UTIL}.throwOnChange(${PROTOS_ACCESSOR}[${index}], ${CHANGES_LOCAL}[0]);\n  ${DISPATCHER_ACCESSOR}.onRecordChange(${PROTOS_ACCESSOR}[${index}].directiveMemento, ${CHANGES_LOCAL});\n  ${CHANGES_LOCAL} = null;\n}\n`;\n}\n\nfunction pipeCheckTemplate(context:string, pipe:string, pipeType:string,\n                                  value:string, change:string, addRecord:string, notify:string):string{\n  return `\nif (${pipe} === ${UTIL}.unitialized()) {\n  ${pipe} = ${PIPE_REGISTRY_ACCESSOR}.get('${pipeType}', ${context});\n} else if (!${pipe}.supports(${context})) {\n  ${pipe}.onDestroy();\n  ${pipe} = ${PIPE_REGISTRY_ACCESSOR}.get('${pipeType}', ${context});\n}\n\n${CHANGE_LOCAL} = ${pipe}.transform(${context});\nif (! ${UTIL}.noChangeMarker(${CHANGE_LOCAL})) {\n  ${value} = ${CHANGE_LOCAL};\n  ${change} = true;\n  ${addRecord}\n}\n${notify}\n`;\n}\n\nfunction referenceCheckTemplate(assignment, newValue, oldValue, change, addRecord, notify) {\n  return `\n${assignment}\nif (${newValue} !== ${oldValue} || (${newValue} !== ${newValue}) && (${oldValue} !== ${oldValue})) {\n  ${change} = true;\n  ${addRecord}\n  ${oldValue} = ${newValue};\n}\n${notify}\n`;\n}\n\nfunction assignmentTemplate(field:string, value:string) {\n  return `${field} = ${value};`;\n}\n\nfunction propertyReadTemplate(name:string, context:string, newValue:string) {\n  return `\n${TEMP_LOCAL} = ${UTIL}.findContext(\"${name}\", ${context});\nif (${TEMP_LOCAL} instanceof ContextWithVariableBindings) {\n  ${newValue} = ${TEMP_LOCAL}.get('${name}');\n} else {\n  ${newValue} = ${TEMP_LOCAL}.${name};\n}\n`;\n}\n\nfunction invokeMethodTemplate(name:string, args:string, context:string, newValue:string) {\n  return `\n${TEMP_LOCAL} = ${UTIL}.findContext(\"${name}\", ${context});\nif (${TEMP_LOCAL} instanceof ContextWithVariableBindings) {\n  ${newValue} = ${TEMP_LOCAL}.get('${name}').apply(null, [${args}]);\n} else {\n  ${newValue} = ${context}.${name}(${args});\n}\n`;\n}\n\nfunction localDefinitionsTemplate(names:List):string {\n  return names.map((n) => `var ${n};`).join(\"\\n\");\n}\n\nfunction changeDefinitionsTemplate(names:List):string {\n  return names.map((n) => `var ${n} = false;`).join(\"\\n\");\n}\n\nfunction fieldDefinitionsTemplate(names:List):string {\n  return names.map((n) => `${n} = ${UTIL}.unitialized();`).join(\"\\n\");\n}\n\nfunction ifChangedGuardTemplate(changeNames:List, body:string):string {\n  var cond = changeNames.join(\" || \");\n  return `\nif (${cond}) {\n  ${body}\n}\n`;\n}\n\nfunction addSimpleChangeRecordTemplate(protoIndex:number, oldValue:string, newValue:string) {\n  return `${CHANGES_LOCAL} = ${UTIL}.addRecord(${CHANGES_LOCAL},\n    ${UTIL}.simpleChangeRecord(${PROTOS_ACCESSOR}[${protoIndex}].bindingMemento, ${oldValue}, ${newValue}));`;\n}\n\n\nexport class ChangeDetectorJITGenerator {\n  typeName:string;\n  records:List<ProtoRecord>;\n  localNames:List<String>;\n  changeNames:List<String>;\n  fieldNames:List<String>;\n  pipeNames:List<String>;\n\n  constructor(typeName:string, records:List<ProtoRecord>) {\n    this.typeName = typeName;\n    this.records = records;\n\n    this.localNames = this.getLocalNames(records);\n    this.changeNames = this.getChangeNames(this.localNames);\n    this.fieldNames = this.getFieldNames(this.localNames);\n    this.pipeNames = this.getPipeNames(this.localNames);\n  }\n\n  getLocalNames(records:List<ProtoRecord>):List<String> {\n    var index = 0;\n    var names = records.map((r) => {\n      var sanitizedName = r.name.replace(new RegExp(\"\\\\W\", \"g\"), '');\n      return `${sanitizedName}${index++}`\n    });\n    return [\"context\"].concat(names);\n  }\n\n  getChangeNames(localNames:List<String>):List<String> {\n    return localNames.map((n) => `change_${n}`);\n  }\n\n  getFieldNames(localNames:List<String>):List<String> {\n    return localNames.map((n) => `this.${n}`);\n  }\n\n  getPipeNames(localNames:List<String>):List<String> {\n    return localNames.map((n) => `this.${n}_pipe`);\n  }\n\n  generate():Function {\n    var text = typeTemplate(this.typeName, this.genConstructor(), this.genDetectChanges(), this.genHydrate());\n    return new Function('AbstractChangeDetector', 'ChangeDetectionUtil', 'ContextWithVariableBindings', 'protos', text)(AbstractChangeDetector, ChangeDetectionUtil, ContextWithVariableBindings, this.records);\n  }\n\n  genConstructor():string {\n    return constructorTemplate(this.typeName, this.genFieldDefinitions());\n  }\n\n  genHydrate():string {\n    return hydrateTemplate(this.typeName, this.genFieldDefinitions(),\n      pipeOnDestroyTemplate(this.getnonNullPipeNames()));\n  }\n\n  genFieldDefinitions() {\n    var fields = [];\n    fields = fields.concat(this.fieldNames);\n    fields = fields.concat(this.getnonNullPipeNames());\n    return fieldDefinitionsTemplate(fields);\n  }\n\n  getnonNullPipeNames():List<String> {\n    var pipes = [];\n    this.records.forEach((r) => {\n      if (r.mode === RECORD_TYPE_PIPE) {\n        pipes.push(this.pipeNames[r.selfIndex]);\n      }\n    });\n    return pipes;\n  }\n\n  genDetectChanges():string {\n    var body = this.genBody();\n    return detectChangesTemplate(this.typeName, body);\n  }\n\n  genBody():string {\n    var rec = this.records.map((r) => this.genRecord(r)).join(\"\\n\");\n    return bodyTemplate(this.genLocalDefinitions(), this.genChangeDefinitions(), rec);\n  }\n\n  genLocalDefinitions():string {\n    return localDefinitionsTemplate(this.localNames);\n  }\n\n  genChangeDefinitions():string {\n    return changeDefinitionsTemplate(this.changeNames);\n  }\n\n  genRecord(r:ProtoRecord):string {\n    if (r.mode === RECORD_TYPE_PIPE) {\n      return this.genPipeCheck (r);\n    } else {\n      return this.genReferenceCheck(r);\n    }\n  }\n\n  genPipeCheck(r:ProtoRecord):string {\n    var context = this.localNames[r.contextIndex];\n    var pipe = this.pipeNames[r.selfIndex];\n    var newValue = this.localNames[r.selfIndex];\n    var oldValue = this.fieldNames[r.selfIndex];\n    var change = this.changeNames[r.selfIndex];\n\n    var addRecord = addSimpleChangeRecordTemplate(r.selfIndex - 1, oldValue, newValue);\n    var notify = this.genNotify(r);\n\n    return pipeCheckTemplate(context, pipe, r.name, newValue, change, addRecord, notify);\n  }\n\n  genReferenceCheck(r:ProtoRecord):string {\n    var newValue = this.localNames[r.selfIndex];\n    var oldValue = this.fieldNames[r.selfIndex];\n    var change = this.changeNames[r.selfIndex];\n    var assignment = this.genUpdateCurrentValue(r);\n    var addRecord = addSimpleChangeRecordTemplate(r.selfIndex - 1, oldValue, newValue);\n    var notify = this.genNotify(r);\n\n    var check = referenceCheckTemplate(assignment, newValue, oldValue, change, r.lastInBinding ? addRecord : '', notify);;\n    if (r.isPureFunction()) {\n      return this.ifChangedGuard(r, check);\n    } else {\n      return check;\n    }\n  }\n\n  genUpdateCurrentValue(r:ProtoRecord):string {\n    var context = this.localNames[r.contextIndex];\n    var newValue = this.localNames[r.selfIndex];\n    var args = this.genArgs(r);\n\n    switch (r.mode) {\n      case RECORD_TYPE_SELF:\n        return assignmentTemplate(newValue, context);\n\n      case RECORD_TYPE_CONST:\n        return `${newValue} = ${this.genLiteral(r.funcOrValue)}`;\n\n      case RECORD_TYPE_PROPERTY:\n        if (r.contextIndex == 0) { // only the first property read can be a local\n          return propertyReadTemplate(r.name, context, newValue);\n        } else {\n          return assignmentTemplate(newValue, `${context}.${r.name}`);\n        }\n\n      case RECORD_TYPE_INVOKE_METHOD:\n        if (r.contextIndex == 0) { // only the first property read can be a local\n          return invokeMethodTemplate(r.name, args, context, newValue);\n        } else {\n          return assignmentTemplate(newValue, `${context}.${r.name}(${args})`);\n        }\n\n      case RECORD_TYPE_INVOKE_CLOSURE:\n        return assignmentTemplate(newValue, `${context}(${args})`);\n\n      case RECORD_TYPE_PRIMITIVE_OP:\n        return assignmentTemplate(newValue, `${UTIL}.${r.name}(${args})`);\n\n      case RECORD_TYPE_INTERPOLATE:\n        return assignmentTemplate(newValue, this.genInterpolation(r));\n\n      case RECORD_TYPE_KEYED_ACCESS:\n        var key = this.localNames[r.args[0]];\n        return assignmentTemplate(newValue, `${context}[${key}]`);\n\n      default:\n        throw new BaseException(`Unknown operation ${r.mode}`);\n    }\n  }\n\n  ifChangedGuard(r:ProtoRecord, body:string):string {\n    return ifChangedGuardTemplate(r.args.map((a) => this.changeNames[a]), body);\n  }\n\n  genInterpolation(r:ProtoRecord):string{\n    var res = \"\";\n    for (var i = 0; i < r.args.length; ++i) {\n      res += this.genLiteral(r.fixedArgs[i]);\n      res += \" + \";\n      res += this.localNames[r.args[i]];\n      res += \" + \";\n    }\n    res += this.genLiteral(r.fixedArgs[r.args.length]);\n    return res;\n  }\n\n  genLiteral(value):string {\n    return JSON.stringify(value);\n  }\n\n  genNotify(r):string{\n    return r.lastInDirective ? notifyTemplate(r.selfIndex - 1) : '';\n  }\n\n  genArgs(r:ProtoRecord):string {\n    return r.args.map((arg) => this.localNames[arg]).join(\", \");\n  }\n}\n\n\n\n\n","assert.argumentTypes($__placeholder__0)","assert.type.$__placeholder__0)","return assert.returnType(($__placeholder__0), $__placeholder__1)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","import {assert} from \"rtts_assert/rtts_assert\";\nimport {isPresent,\n  isBlank,\n  BaseException,\n  Type} from 'angular2/src/facade/lang';\nimport {List,\n  ListWrapper,\n  MapWrapper,\n  StringMapWrapper} from 'angular2/src/facade/collection';\nimport {ContextWithVariableBindings} from './parser/context_with_variable_bindings';\nimport {AbstractChangeDetector} from './abstract_change_detector';\nimport {ChangeDetectionUtil} from './change_detection_util';\nimport {ProtoRecord,\n  RECORD_TYPE_SELF,\n  RECORD_TYPE_PROPERTY,\n  RECORD_TYPE_INVOKE_METHOD,\n  RECORD_TYPE_CONST,\n  RECORD_TYPE_INVOKE_CLOSURE,\n  RECORD_TYPE_PRIMITIVE_OP,\n  RECORD_TYPE_KEYED_ACCESS,\n  RECORD_TYPE_PIPE,\n  RECORD_TYPE_INTERPOLATE} from './proto_record';\nvar ABSTRACT_CHANGE_DETECTOR = \"AbstractChangeDetector\";\nvar UTIL = \"ChangeDetectionUtil\";\nvar DISPATCHER_ACCESSOR = \"this.dispatcher\";\nvar PIPE_REGISTRY_ACCESSOR = \"this.pipeRegistry\";\nvar PROTOS_ACCESSOR = \"this.protos\";\nvar CHANGE_LOCAL = \"change\";\nvar CHANGES_LOCAL = \"changes\";\nvar TEMP_LOCAL = \"temp\";\nfunction typeTemplate(type, cons, detectChanges, setContext) {\n  assert.argumentTypes(type, assert.type.string, cons, assert.type.string, detectChanges, assert.type.string, setContext, assert.type.string);\n  return assert.returnType((`\n${cons}\n${detectChanges}\n${setContext};\n\nreturn function(dispatcher, pipeRegistry) {\n  return new ${type}(dispatcher, pipeRegistry, protos);\n}\n`), assert.type.string);\n}\nObject.defineProperty(typeTemplate, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string], [assert.type.string], [assert.type.string]];\n  }});\nfunction constructorTemplate(type, fieldsDefinitions) {\n  assert.argumentTypes(type, assert.type.string, fieldsDefinitions, assert.type.string);\n  return assert.returnType((`\nvar ${type} = function ${type}(dispatcher, pipeRegistry, protos) {\n${ABSTRACT_CHANGE_DETECTOR}.call(this);\n${DISPATCHER_ACCESSOR} = dispatcher;\n${PIPE_REGISTRY_ACCESSOR} = pipeRegistry;\n${PROTOS_ACCESSOR} = protos;\n${fieldsDefinitions}\n}\n\n${type}.prototype = Object.create(${ABSTRACT_CHANGE_DETECTOR}.prototype);\n`), assert.type.string);\n}\nObject.defineProperty(constructorTemplate, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string]];\n  }});\nfunction pipeOnDestroyTemplate(pipeNames) {\n  return pipeNames.map((p) => `${p}.onDestroy()`).join(\"\\n\");\n}\nObject.defineProperty(pipeOnDestroyTemplate, \"parameters\", {get: function() {\n    return [[List]];\n  }});\nfunction hydrateTemplate(type, fieldsDefinitions, pipeOnDestroy) {\n  assert.argumentTypes(type, assert.type.string, fieldsDefinitions, assert.type.string, pipeOnDestroy, assert.type.string);\n  return assert.returnType((`\n${type}.prototype.hydrate = function(context) {\n  this.context = context;\n}\n${type}.prototype.dehydrate = function() {\n  ${pipeOnDestroy}\n  ${fieldsDefinitions}\n}\n${type}.prototype.hydrated = function() {\n  return this.context !== ${UTIL}.unitialized();\n}\n`), assert.type.string);\n}\nObject.defineProperty(hydrateTemplate, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string], [assert.type.string]];\n  }});\nfunction detectChangesTemplate(type, body) {\n  assert.argumentTypes(type, assert.type.string, body, assert.type.string);\n  return assert.returnType((`\n${type}.prototype.detectChangesInRecords = function(throwOnChange) {\n  ${body}\n}\n`), assert.type.string);\n}\nObject.defineProperty(detectChangesTemplate, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string]];\n  }});\nfunction bodyTemplate(localDefinitions, changeDefinitions, records) {\n  assert.argumentTypes(localDefinitions, assert.type.string, changeDefinitions, assert.type.string, records, assert.type.string);\n  return assert.returnType((`\n${localDefinitions}\n${changeDefinitions}\nvar ${TEMP_LOCAL};\nvar ${CHANGE_LOCAL};\nvar ${CHANGES_LOCAL} = null;\n\ncontext = this.context;\n${records}\n`), assert.type.string);\n}\nObject.defineProperty(bodyTemplate, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string], [assert.type.string]];\n  }});\nfunction notifyTemplate(index) {\n  assert.argumentTypes(index, assert.type.number);\n  return assert.returnType((`\nif (${CHANGES_LOCAL} && ${CHANGES_LOCAL}.length > 0) {\n  if(throwOnChange) ${UTIL}.throwOnChange(${PROTOS_ACCESSOR}[${index}], ${CHANGES_LOCAL}[0]);\n  ${DISPATCHER_ACCESSOR}.onRecordChange(${PROTOS_ACCESSOR}[${index}].directiveMemento, ${CHANGES_LOCAL});\n  ${CHANGES_LOCAL} = null;\n}\n`), assert.type.string);\n}\nObject.defineProperty(notifyTemplate, \"parameters\", {get: function() {\n    return [[assert.type.number]];\n  }});\nfunction pipeCheckTemplate(context, pipe, pipeType, value, change, addRecord, notify) {\n  assert.argumentTypes(context, assert.type.string, pipe, assert.type.string, pipeType, assert.type.string, value, assert.type.string, change, assert.type.string, addRecord, assert.type.string, notify, assert.type.string);\n  return assert.returnType((`\nif (${pipe} === ${UTIL}.unitialized()) {\n  ${pipe} = ${PIPE_REGISTRY_ACCESSOR}.get('${pipeType}', ${context});\n} else if (!${pipe}.supports(${context})) {\n  ${pipe}.onDestroy();\n  ${pipe} = ${PIPE_REGISTRY_ACCESSOR}.get('${pipeType}', ${context});\n}\n\n${CHANGE_LOCAL} = ${pipe}.transform(${context});\nif (! ${UTIL}.noChangeMarker(${CHANGE_LOCAL})) {\n  ${value} = ${CHANGE_LOCAL};\n  ${change} = true;\n  ${addRecord}\n}\n${notify}\n`), assert.type.string);\n}\nObject.defineProperty(pipeCheckTemplate, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string], [assert.type.string], [assert.type.string], [assert.type.string], [assert.type.string], [assert.type.string]];\n  }});\nfunction referenceCheckTemplate(assignment, newValue, oldValue, change, addRecord, notify) {\n  return `\n${assignment}\nif (${newValue} !== ${oldValue} || (${newValue} !== ${newValue}) && (${oldValue} !== ${oldValue})) {\n  ${change} = true;\n  ${addRecord}\n  ${oldValue} = ${newValue};\n}\n${notify}\n`;\n}\nfunction assignmentTemplate(field, value) {\n  assert.argumentTypes(field, assert.type.string, value, assert.type.string);\n  return `${field} = ${value};`;\n}\nObject.defineProperty(assignmentTemplate, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string]];\n  }});\nfunction propertyReadTemplate(name, context, newValue) {\n  assert.argumentTypes(name, assert.type.string, context, assert.type.string, newValue, assert.type.string);\n  return `\n${TEMP_LOCAL} = ${UTIL}.findContext(\"${name}\", ${context});\nif (${TEMP_LOCAL} instanceof ContextWithVariableBindings) {\n  ${newValue} = ${TEMP_LOCAL}.get('${name}');\n} else {\n  ${newValue} = ${TEMP_LOCAL}.${name};\n}\n`;\n}\nObject.defineProperty(propertyReadTemplate, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string], [assert.type.string]];\n  }});\nfunction invokeMethodTemplate(name, args, context, newValue) {\n  assert.argumentTypes(name, assert.type.string, args, assert.type.string, context, assert.type.string, newValue, assert.type.string);\n  return `\n${TEMP_LOCAL} = ${UTIL}.findContext(\"${name}\", ${context});\nif (${TEMP_LOCAL} instanceof ContextWithVariableBindings) {\n  ${newValue} = ${TEMP_LOCAL}.get('${name}').apply(null, [${args}]);\n} else {\n  ${newValue} = ${context}.${name}(${args});\n}\n`;\n}\nObject.defineProperty(invokeMethodTemplate, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string], [assert.type.string], [assert.type.string]];\n  }});\nfunction localDefinitionsTemplate(names) {\n  return assert.returnType((names.map((n) => `var ${n};`).join(\"\\n\")), assert.type.string);\n}\nObject.defineProperty(localDefinitionsTemplate, \"parameters\", {get: function() {\n    return [[List]];\n  }});\nfunction changeDefinitionsTemplate(names) {\n  return assert.returnType((names.map((n) => `var ${n} = false;`).join(\"\\n\")), assert.type.string);\n}\nObject.defineProperty(changeDefinitionsTemplate, \"parameters\", {get: function() {\n    return [[List]];\n  }});\nfunction fieldDefinitionsTemplate(names) {\n  return assert.returnType((names.map((n) => `${n} = ${UTIL}.unitialized();`).join(\"\\n\")), assert.type.string);\n}\nObject.defineProperty(fieldDefinitionsTemplate, \"parameters\", {get: function() {\n    return [[List]];\n  }});\nfunction ifChangedGuardTemplate(changeNames, body) {\n  assert.argumentTypes(changeNames, List, body, assert.type.string);\n  var cond = changeNames.join(\" || \");\n  return assert.returnType((`\nif (${cond}) {\n  ${body}\n}\n`), assert.type.string);\n}\nObject.defineProperty(ifChangedGuardTemplate, \"parameters\", {get: function() {\n    return [[List], [assert.type.string]];\n  }});\nfunction addSimpleChangeRecordTemplate(protoIndex, oldValue, newValue) {\n  assert.argumentTypes(protoIndex, assert.type.number, oldValue, assert.type.string, newValue, assert.type.string);\n  return `${CHANGES_LOCAL} = ${UTIL}.addRecord(${CHANGES_LOCAL},\n    ${UTIL}.simpleChangeRecord(${PROTOS_ACCESSOR}[${protoIndex}].bindingMemento, ${oldValue}, ${newValue}));`;\n}\nObject.defineProperty(addSimpleChangeRecordTemplate, \"parameters\", {get: function() {\n    return [[assert.type.number], [assert.type.string], [assert.type.string]];\n  }});\nexport class ChangeDetectorJITGenerator {\n  constructor(typeName, records) {\n    assert.argumentTypes(typeName, assert.type.string, records, assert.genericType(List, ProtoRecord));\n    this.typeName = typeName;\n    this.records = records;\n    this.localNames = this.getLocalNames(records);\n    this.changeNames = this.getChangeNames(this.localNames);\n    this.fieldNames = this.getFieldNames(this.localNames);\n    this.pipeNames = this.getPipeNames(this.localNames);\n  }\n  getLocalNames(records) {\n    assert.argumentTypes(records, assert.genericType(List, ProtoRecord));\n    var index = 0;\n    var names = records.map((r) => {\n      var sanitizedName = r.name.replace(new RegExp(\"\\\\W\", \"g\"), '');\n      return `${sanitizedName}${index++}`;\n    });\n    return assert.returnType(([\"context\"].concat(names)), assert.genericType(List, String));\n  }\n  getChangeNames(localNames) {\n    return assert.returnType((localNames.map((n) => `change_${n}`)), assert.genericType(List, String));\n  }\n  getFieldNames(localNames) {\n    return assert.returnType((localNames.map((n) => `this.${n}`)), assert.genericType(List, String));\n  }\n  getPipeNames(localNames) {\n    return assert.returnType((localNames.map((n) => `this.${n}_pipe`)), assert.genericType(List, String));\n  }\n  generate() {\n    var text = typeTemplate(this.typeName, this.genConstructor(), this.genDetectChanges(), this.genHydrate());\n    return assert.returnType((new Function('AbstractChangeDetector', 'ChangeDetectionUtil', 'ContextWithVariableBindings', 'protos', text)(AbstractChangeDetector, ChangeDetectionUtil, ContextWithVariableBindings, this.records)), Function);\n  }\n  genConstructor() {\n    return assert.returnType((constructorTemplate(this.typeName, this.genFieldDefinitions())), assert.type.string);\n  }\n  genHydrate() {\n    return assert.returnType((hydrateTemplate(this.typeName, this.genFieldDefinitions(), pipeOnDestroyTemplate(this.getnonNullPipeNames()))), assert.type.string);\n  }\n  genFieldDefinitions() {\n    var fields = [];\n    fields = fields.concat(this.fieldNames);\n    fields = fields.concat(this.getnonNullPipeNames());\n    return fieldDefinitionsTemplate(fields);\n  }\n  getnonNullPipeNames() {\n    var pipes = [];\n    this.records.forEach((r) => {\n      if (r.mode === RECORD_TYPE_PIPE) {\n        pipes.push(this.pipeNames[r.selfIndex]);\n      }\n    });\n    return assert.returnType((pipes), assert.genericType(List, String));\n  }\n  genDetectChanges() {\n    var body = this.genBody();\n    return assert.returnType((detectChangesTemplate(this.typeName, body)), assert.type.string);\n  }\n  genBody() {\n    var rec = this.records.map((r) => this.genRecord(r)).join(\"\\n\");\n    return assert.returnType((bodyTemplate(this.genLocalDefinitions(), this.genChangeDefinitions(), rec)), assert.type.string);\n  }\n  genLocalDefinitions() {\n    return assert.returnType((localDefinitionsTemplate(this.localNames)), assert.type.string);\n  }\n  genChangeDefinitions() {\n    return assert.returnType((changeDefinitionsTemplate(this.changeNames)), assert.type.string);\n  }\n  genRecord(r) {\n    assert.argumentTypes(r, ProtoRecord);\n    if (r.mode === RECORD_TYPE_PIPE) {\n      return assert.returnType((this.genPipeCheck(r)), assert.type.string);\n    } else {\n      return assert.returnType((this.genReferenceCheck(r)), assert.type.string);\n    }\n  }\n  genPipeCheck(r) {\n    assert.argumentTypes(r, ProtoRecord);\n    var context = this.localNames[r.contextIndex];\n    var pipe = this.pipeNames[r.selfIndex];\n    var newValue = this.localNames[r.selfIndex];\n    var oldValue = this.fieldNames[r.selfIndex];\n    var change = this.changeNames[r.selfIndex];\n    var addRecord = addSimpleChangeRecordTemplate(r.selfIndex - 1, oldValue, newValue);\n    var notify = this.genNotify(r);\n    return assert.returnType((pipeCheckTemplate(context, pipe, r.name, newValue, change, addRecord, notify)), assert.type.string);\n  }\n  genReferenceCheck(r) {\n    assert.argumentTypes(r, ProtoRecord);\n    var newValue = this.localNames[r.selfIndex];\n    var oldValue = this.fieldNames[r.selfIndex];\n    var change = this.changeNames[r.selfIndex];\n    var assignment = this.genUpdateCurrentValue(r);\n    var addRecord = addSimpleChangeRecordTemplate(r.selfIndex - 1, oldValue, newValue);\n    var notify = this.genNotify(r);\n    var check = referenceCheckTemplate(assignment, newValue, oldValue, change, r.lastInBinding ? addRecord : '', notify);\n    ;\n    if (r.isPureFunction()) {\n      return assert.returnType((this.ifChangedGuard(r, check)), assert.type.string);\n    } else {\n      return assert.returnType((check), assert.type.string);\n    }\n  }\n  genUpdateCurrentValue(r) {\n    assert.argumentTypes(r, ProtoRecord);\n    var context = this.localNames[r.contextIndex];\n    var newValue = this.localNames[r.selfIndex];\n    var args = this.genArgs(r);\n    switch (r.mode) {\n      case RECORD_TYPE_SELF:\n        return assert.returnType((assignmentTemplate(newValue, context)), assert.type.string);\n      case RECORD_TYPE_CONST:\n        return assert.returnType((`${newValue} = ${this.genLiteral(r.funcOrValue)}`), assert.type.string);\n      case RECORD_TYPE_PROPERTY:\n        if (r.contextIndex == 0) {\n          return assert.returnType((propertyReadTemplate(r.name, context, newValue)), assert.type.string);\n        } else {\n          return assert.returnType((assignmentTemplate(newValue, `${context}.${r.name}`)), assert.type.string);\n        }\n      case RECORD_TYPE_INVOKE_METHOD:\n        if (r.contextIndex == 0) {\n          return assert.returnType((invokeMethodTemplate(r.name, args, context, newValue)), assert.type.string);\n        } else {\n          return assert.returnType((assignmentTemplate(newValue, `${context}.${r.name}(${args})`)), assert.type.string);\n        }\n      case RECORD_TYPE_INVOKE_CLOSURE:\n        return assert.returnType((assignmentTemplate(newValue, `${context}(${args})`)), assert.type.string);\n      case RECORD_TYPE_PRIMITIVE_OP:\n        return assert.returnType((assignmentTemplate(newValue, `${UTIL}.${r.name}(${args})`)), assert.type.string);\n      case RECORD_TYPE_INTERPOLATE:\n        return assert.returnType((assignmentTemplate(newValue, this.genInterpolation(r))), assert.type.string);\n      case RECORD_TYPE_KEYED_ACCESS:\n        var key = this.localNames[r.args[0]];\n        return assert.returnType((assignmentTemplate(newValue, `${context}[${key}]`)), assert.type.string);\n      default:\n        throw new BaseException(`Unknown operation ${r.mode}`);\n    }\n  }\n  ifChangedGuard(r, body) {\n    return assert.returnType((ifChangedGuardTemplate(r.args.map((a) => this.changeNames[a]), body)), assert.type.string);\n  }\n  genInterpolation(r) {\n    assert.argumentTypes(r, ProtoRecord);\n    var res = \"\";\n    for (var i = 0; i < r.args.length; ++i) {\n      res += this.genLiteral(r.fixedArgs[i]);\n      res += \" + \";\n      res += this.localNames[r.args[i]];\n      res += \" + \";\n    }\n    res += this.genLiteral(r.fixedArgs[r.args.length]);\n    return assert.returnType((res), assert.type.string);\n  }\n  genLiteral(value) {\n    return assert.returnType((JSON.stringify(value)), assert.type.string);\n  }\n  genNotify(r) {\n    return assert.returnType((r.lastInDirective ? notifyTemplate(r.selfIndex - 1) : ''), assert.type.string);\n  }\n  genArgs(r) {\n    return assert.returnType((r.args.map((arg) => this.localNames[arg]).join(\", \")), assert.type.string);\n  }\n}\nObject.defineProperty(ChangeDetectorJITGenerator, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.genericType(List, ProtoRecord)]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.getLocalNames, \"parameters\", {get: function() {\n    return [[assert.genericType(List, ProtoRecord)]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.getChangeNames, \"parameters\", {get: function() {\n    return [[assert.genericType(List, String)]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.getFieldNames, \"parameters\", {get: function() {\n    return [[assert.genericType(List, String)]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.getPipeNames, \"parameters\", {get: function() {\n    return [[assert.genericType(List, String)]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.genRecord, \"parameters\", {get: function() {\n    return [[ProtoRecord]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.genPipeCheck, \"parameters\", {get: function() {\n    return [[ProtoRecord]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.genReferenceCheck, \"parameters\", {get: function() {\n    return [[ProtoRecord]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.genUpdateCurrentValue, \"parameters\", {get: function() {\n    return [[ProtoRecord]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.ifChangedGuard, \"parameters\", {get: function() {\n    return [[ProtoRecord], [assert.type.string]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.genInterpolation, \"parameters\", {get: function() {\n    return [[ProtoRecord]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.genArgs, \"parameters\", {get: function() {\n    return [[ProtoRecord]];\n  }});\n\n//# sourceMappingURL=/Users/jbisa/ksi/devel/angular2/modules/angular2/src/change_detection/change_detection_jit_generator.map\n\n//# sourceMappingURL=./change_detection_jit_generator.map","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","var $__placeholder__0 = $__export($__placeholder__1, $__placeholder__2);","function() {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4);\n        }()","assert.genericType($__placeholder__0)"]}