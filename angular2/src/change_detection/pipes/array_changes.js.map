{"version":3,"sources":["@traceur/generated/TemplateParser/22","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/26","@traceur/generated/TemplateParser/23","@traceur/generated/TemplateParser/27","angular2/src/change_detection/pipes/array_changes.js","angular2/src/change_detection/pipes/@traceur/generated/TemplateParser/9","angular2/src/change_detection/pipes/@traceur/generated/TemplateParser/7","@traceur/generated/TemplateParser/28","@traceur/generated/TemplateParser/13","angular2/src/change_detection/pipes/@traceur/generated/TemplateParser/8","angular2/src/change_detection/pipes/@traceur/generated/TemplateParser/389","angular2/src/change_detection/pipes/@traceur/generated/TemplateParser/2982","angular2/src/change_detection/pipes/@traceur/generated/TemplateParser/2983","angular2/src/change_detection/pipes/@traceur/generated/TemplateParser/10","@traceur/generated/TemplateParser/29","angular2/src/change_detection/pipes/@traceur/generated/TemplateParser/2985"],"names":[],"mappings":"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","file":"angular2/src/change_detection/pipes/array_changes.js","sourceRoot":"/Users/jbisa/ksi/devel/angular2/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","var $__placeholder__0 = $__export($__placeholder__1, $__placeholder__2);","function() {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4);\n        }()","import {\n  isListLikeIterable,\n  iterateListLike,\n  ListWrapper,\n  MapWrapper\n} from 'angular2/src/facade/collection';\n\nimport {\n  int,\n  isBlank,\n  isPresent,\n  stringify,\n  getMapKey,\n  looseIdentical,\n} from 'angular2/src/facade/lang';\n\nimport {NO_CHANGE, Pipe} from './pipe';\n\nexport class ArrayChangesFactory {\n  supports(obj):boolean {\n    return ArrayChanges.supportsObj(obj);\n  }\n\n  create():Pipe {\n    return new ArrayChanges();\n  }\n}\n\nexport class ArrayChanges extends Pipe {\n  _collection;\n  _length:int;\n  _linkedRecords:_DuplicateMap;\n  _unlinkedRecords:_DuplicateMap;\n  _previousItHead:CollectionChangeRecord;\n  _itHead:CollectionChangeRecord;\n  _itTail:CollectionChangeRecord;\n  _additionsHead:CollectionChangeRecord;\n  _additionsTail:CollectionChangeRecord;\n  _movesHead:CollectionChangeRecord;\n  _movesTail:CollectionChangeRecord;\n  _removalsHead:CollectionChangeRecord;\n  _removalsTail:CollectionChangeRecord;\n\n  constructor() {\n    super();\n    this._collection = null;\n    this._length = null;\n    /// Keeps track of the used records at any point in time (during & across `_check()` calls)\n    this._linkedRecords = null;\n    /// Keeps track of the removed records at any point in time during `_check()` calls.\n    this._unlinkedRecords = null;\n\n    this._previousItHead = null;\n    this._itHead = null;\n    this._itTail = null;\n    this._additionsHead = null;\n    this._additionsTail = null;\n    this._movesHead = null;\n    this._movesTail = null;\n    this._removalsHead = null;\n    this._removalsTail = null;\n  }\n\n  static supportsObj(obj):boolean {\n    return isListLikeIterable(obj);\n  }\n\n  supports(obj):boolean {\n    return ArrayChanges.supportsObj(obj);\n  }\n\n  get collection() {\n    return this._collection;\n  }\n\n  get length():int {\n    return this._length;\n  }\n\n  forEachItem(fn:Function) {\n    var record:CollectionChangeRecord;\n    for (record = this._itHead; record !== null; record = record._next) {\n      fn(record);\n    }\n  }\n\n  forEachPreviousItem(fn:Function) {\n    var record:CollectionChangeRecord;\n    for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n      fn(record);\n    }\n  }\n\n  forEachAddedItem(fn:Function){\n    var record:CollectionChangeRecord;\n    for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n      fn(record);\n    }\n  }\n\n  forEachMovedItem(fn:Function) {\n    var record:CollectionChangeRecord;\n    for (record = this._movesHead; record !== null; record = record._nextMoved) {\n      fn(record);\n    }\n  }\n\n  forEachRemovedItem(fn:Function){\n    var record:CollectionChangeRecord;\n    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n      fn(record);\n    }\n  }\n\n  transform(collection){\n    if (this.check(collection)) {\n      return this;\n    } else {\n      return NO_CHANGE;\n    }\n  }\n\n  // todo(vicb): optim for UnmodifiableListView (frozen arrays)\n  check(collection):boolean {\n    this._reset();\n\n    var record:CollectionChangeRecord = this._itHead;\n    var mayBeDirty:boolean = false;\n    var index:int, item;\n\n    if (ListWrapper.isList(collection)) {\n      var list = collection;\n      this._length = collection.length;\n\n      for (index = 0; index < this._length; index++) {\n        item = list[index];\n        if (record === null || !looseIdentical(record.item, item)) {\n          record = this._mismatch(record, item, index);\n          mayBeDirty = true;\n        } else if (mayBeDirty) {\n          // TODO(misko): can we limit this to duplicates only?\n          record = this._verifyReinsertion(record, item, index);\n        }\n        record = record._next;\n      }\n    } else {\n      index = 0;\n      iterateListLike(collection, (item) => {\n        if (record === null || !looseIdentical(record.item, item)) {\n          record = this._mismatch(record, item, index);\n          mayBeDirty = true;\n        } else if (mayBeDirty) {\n          // TODO(misko): can we limit this to duplicates only?\n          record = this._verifyReinsertion(record, item, index);\n        }\n        record = record._next;\n        index++\n      });\n      this._length = index;\n    }\n\n    this._truncate(record);\n    this._collection = collection;\n    return this.isDirty;\n  }\n\n  // CollectionChanges is considered dirty if it has any additions, moves or removals.\n  get isDirty():boolean {\n    return this._additionsHead !== null ||\n           this._movesHead !== null ||\n           this._removalsHead !== null;\n  }\n\n  /**\n   * Reset the state of the change objects to show no changes. This means set previousKey to\n   * currentKey, and clear all of the queues (additions, moves, removals).\n   * Set the previousIndexes of moved and added items to their currentIndexes\n   * Reset the list of additions, moves and removals\n   */\n  _reset() {\n    if (this.isDirty) {\n      var record:CollectionChangeRecord;\n      var nextRecord:CollectionChangeRecord;\n\n      for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n        record._nextPrevious = record._next;\n      }\n\n      for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n        record.previousIndex = record.currentIndex;\n      }\n      this._additionsHead = this._additionsTail = null;\n\n      for (record = this._movesHead; record !== null; record = nextRecord) {\n        record.previousIndex = record.currentIndex;\n        nextRecord = record._nextMoved;\n      }\n      this._movesHead = this._movesTail = null;\n      this._removalsHead = this._removalsTail = null;\n\n      // todo(vicb) when assert gets supported\n      // assert(!this.isDirty);\n    }\n  }\n\n  /**\n   * This is the core function which handles differences between collections.\n   *\n   * - [record] is the record which we saw at this position last time. If null then it is a new\n   *   item.\n   * - [item] is the current item in the collection\n   * - [index] is the position of the item in the collection\n   */\n  _mismatch(record:CollectionChangeRecord, item, index:int):CollectionChangeRecord {\n    // The previous record after which we will append the current one.\n    var previousRecord:CollectionChangeRecord;\n\n    if (record === null) {\n      previousRecord = this._itTail;\n    } else {\n      previousRecord = record._prev;\n      // Remove the record from the collection since we know it does not match the item.\n      this._remove(record);\n    }\n\n    // Attempt to see if we have seen the item before.\n    record = this._linkedRecords === null ? null : this._linkedRecords.get(item, index);\n    if (record !== null) {\n      // We have seen this before, we need to move it forward in the collection.\n      this._moveAfter(record, previousRecord, index);\n    } else {\n      // Never seen it, check evicted list.\n      record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(item);\n      if (record !== null) {\n        // It is an item which we have evicted earlier: reinsert it back into the list.\n        this._reinsertAfter(record, previousRecord, index);\n      } else {\n        // It is a new item: add it.\n        record = this._addAfter(new CollectionChangeRecord(item), previousRecord, index);\n      }\n    }\n    return record;\n  }\n\n  /**\n   * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n   *\n   * Use case: `[a, a]` => `[b, a, a]`\n   *\n   * If we did not have this check then the insertion of `b` would:\n   *   1) evict first `a`\n   *   2) insert `b` at `0` index.\n   *   3) leave `a` at index `1` as is. <-- this is wrong!\n   *   3) reinsert `a` at index 2. <-- this is wrong!\n   *\n   * The correct behavior is:\n   *   1) evict first `a`\n   *   2) insert `b` at `0` index.\n   *   3) reinsert `a` at index 1.\n   *   3) move `a` at from `1` to `2`.\n   *\n   *\n   * Double check that we have not evicted a duplicate item. We need to check if the item type may\n   * have already been removed:\n   * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n   * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n   * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n   * at the end.\n   */\n  _verifyReinsertion(record:CollectionChangeRecord, item, index:int):CollectionChangeRecord {\n    var reinsertRecord:CollectionChangeRecord = this._unlinkedRecords === null ?\n      null : this._unlinkedRecords.get(item);\n    if (reinsertRecord !== null) {\n      record = this._reinsertAfter(reinsertRecord, record._prev, index);\n    } else if (record.currentIndex != index) {\n      record.currentIndex = index;\n      this._addToMoves(record, index);\n    }\n    return record;\n  }\n\n  /**\n   * Get rid of any excess [CollectionChangeRecord]s from the previous collection\n   *\n   * - [record] The first excess [CollectionChangeRecord].\n   */\n  _truncate(record:CollectionChangeRecord) {\n    // Anything after that needs to be removed;\n    while (record !== null) {\n      var nextRecord:CollectionChangeRecord = record._next;\n      this._addToRemovals(this._unlink(record));\n      record = nextRecord;\n    }\n    if (this._unlinkedRecords !== null) {\n      this._unlinkedRecords.clear();\n    }\n\n    if (this._additionsTail !== null) {\n      this._additionsTail._nextAdded = null;\n    }\n    if (this._movesTail !== null) {\n      this._movesTail._nextMoved = null;\n    }\n    if (this._itTail !== null) {\n      this._itTail._next = null;\n    }\n    if (this._removalsTail !== null) {\n      this._removalsTail._nextRemoved = null;\n    }\n  }\n\n  _reinsertAfter(record:CollectionChangeRecord, prevRecord:CollectionChangeRecord,\n                 index:int):CollectionChangeRecord {\n    if (this._unlinkedRecords !== null) {\n      this._unlinkedRecords.remove(record);\n    }\n    var prev = record._prevRemoved;\n    var next = record._nextRemoved;\n\n    if (prev === null) {\n      this._removalsHead = next;\n    } else {\n      prev._nextRemoved = next;\n    }\n    if (next === null) {\n      this._removalsTail = prev;\n    } else {\n      next._prevRemoved = prev;\n    }\n\n    this._insertAfter(record, prevRecord, index);\n    this._addToMoves(record, index);\n    return record;\n  }\n\n  _moveAfter(record:CollectionChangeRecord, prevRecord:CollectionChangeRecord,\n             index:int):CollectionChangeRecord {\n    this._unlink(record);\n    this._insertAfter(record, prevRecord, index);\n    this._addToMoves(record, index);\n    return record;\n  }\n\n  _addAfter(record:CollectionChangeRecord, prevRecord:CollectionChangeRecord,\n            index:int):CollectionChangeRecord {\n    this._insertAfter(record, prevRecord, index);\n\n    if (this._additionsTail === null) {\n      // todo(vicb)\n      //assert(this._additionsHead === null);\n      this._additionsTail = this._additionsHead = record;\n    } else {\n      // todo(vicb)\n      //assert(_additionsTail._nextAdded === null);\n      //assert(record._nextAdded === null);\n      this._additionsTail = this._additionsTail._nextAdded = record;\n    }\n    return record;\n  }\n\n  _insertAfter(record:CollectionChangeRecord, prevRecord:CollectionChangeRecord,\n              index:int):CollectionChangeRecord {\n    // todo(vicb)\n    //assert(record != prevRecord);\n    //assert(record._next === null);\n    //assert(record._prev === null);\n\n    var next:CollectionChangeRecord = prevRecord === null ? this._itHead :prevRecord._next;\n    // todo(vicb)\n    //assert(next != record);\n    //assert(prevRecord != record);\n    record._next = next;\n    record._prev = prevRecord;\n    if (next === null) {\n      this._itTail = record;\n    } else {\n      next._prev = record;\n    }\n    if (prevRecord === null) {\n      this._itHead = record;\n    } else {\n      prevRecord._next = record;\n    }\n\n    if (this._linkedRecords === null) {\n      this._linkedRecords = new _DuplicateMap();\n    }\n    this._linkedRecords.put(record);\n\n    record.currentIndex = index;\n    return record;\n  }\n\n  _remove(record:CollectionChangeRecord):CollectionChangeRecord {\n    return this._addToRemovals(this._unlink(record));\n  }\n\n  _unlink(record:CollectionChangeRecord):CollectionChangeRecord {\n    if (this._linkedRecords !== null) {\n      this._linkedRecords.remove(record);\n    }\n\n    var prev = record._prev;\n    var next = record._next;\n\n    // todo(vicb)\n    //assert((record._prev = null) === null);\n    //assert((record._next = null) === null);\n\n    if (prev === null) {\n      this._itHead = next;\n    } else {\n      prev._next = next;\n    }\n    if (next === null) {\n      this._itTail = prev;\n    } else {\n      next._prev = prev;\n    }\n\n    return record;\n  }\n\n  _addToMoves(record:CollectionChangeRecord, toIndex:int):CollectionChangeRecord {\n    // todo(vicb)\n    //assert(record._nextMoved === null);\n\n    if (record.previousIndex === toIndex) {\n      return record;\n    }\n\n    if (this._movesTail === null) {\n      // todo(vicb)\n      //assert(_movesHead === null);\n      this._movesTail = this._movesHead = record;\n    } else {\n      // todo(vicb)\n      //assert(_movesTail._nextMoved === null);\n      this._movesTail = this._movesTail._nextMoved = record;\n    }\n\n    return record;\n  }\n\n  _addToRemovals(record:CollectionChangeRecord):CollectionChangeRecord {\n    if (this._unlinkedRecords === null) {\n      this._unlinkedRecords = new _DuplicateMap();\n    }\n    this._unlinkedRecords.put(record);\n    record.currentIndex = null;\n    record._nextRemoved = null;\n\n    if (this._removalsTail === null) {\n      // todo(vicb)\n      //assert(_removalsHead === null);\n      this._removalsTail = this._removalsHead = record;\n      record._prevRemoved = null;\n    } else {\n      // todo(vicb)\n      //assert(_removalsTail._nextRemoved === null);\n      //assert(record._nextRemoved === null);\n      record._prevRemoved = this._removalsTail;\n      this._removalsTail = this._removalsTail._nextRemoved = record;\n    }\n    return record;\n  }\n\n  toString():string {\n    var record:CollectionChangeRecord;\n\n    var list = [];\n    for (record = this._itHead; record !== null; record = record._next) {\n      ListWrapper.push(list, record);\n    }\n\n    var previous = [];\n    for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n      ListWrapper.push(previous, record);\n    }\n\n    var additions = [];\n    for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n      ListWrapper.push(additions, record);\n    }\n    var moves = [];\n    for (record = this._movesHead; record !== null; record = record._nextMoved) {\n      ListWrapper.push(moves, record);\n    }\n\n    var removals = [];\n    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n      ListWrapper.push(removals, record);\n    }\n\n    return \"collection: \" + list.join(', ') + \"\\n\" +\n           \"previous: \" + previous.join(', ') + \"\\n\" +\n           \"additions: \" + additions.join(', ') + \"\\n\" +\n           \"moves: \" + moves.join(', ') + \"\\n\" +\n           \"removals: \" + removals.join(', ') + \"\\n\";\n  }\n}\n\nexport class CollectionChangeRecord  {\n  currentIndex:int;\n  previousIndex:int;\n  item;\n\n  _nextPrevious:CollectionChangeRecord;\n  _prev:CollectionChangeRecord; _next:CollectionChangeRecord;\n  _prevDup:CollectionChangeRecord; _nextDup:CollectionChangeRecord;\n  _prevRemoved:CollectionChangeRecord; _nextRemoved:CollectionChangeRecord;\n  _nextAdded:CollectionChangeRecord;\n  _nextMoved:CollectionChangeRecord;\n\n  constructor(item) {\n    this.currentIndex = null;\n    this.previousIndex = null;\n    this.item = item;\n\n    this._nextPrevious = null;\n    this._prev = null;\n    this._next = null;\n    this._prevDup = null;\n    this._nextDup = null;\n    this._prevRemoved = null;\n    this._nextRemoved = null;\n    this._nextAdded = null;\n    this._nextMoved = null;\n  }\n\n  toString():string {\n    return this.previousIndex === this.currentIndex ?\n      stringify(this.item) :\n      stringify(this.item) + '[' + stringify(this.previousIndex) + '->' +\n        stringify(this.currentIndex) + ']';\n  }\n}\n\n// A linked list of CollectionChangeRecords with the same CollectionChangeRecord.item\nclass _DuplicateItemRecordList {\n  _head:CollectionChangeRecord;\n  _tail:CollectionChangeRecord;\n\n  constructor() {\n    this._head = null;\n    this._tail = null;\n  }\n\n  /**\n   * Append the record to the list of duplicates.\n   *\n   * Note: by design all records in the list of duplicates hold the same value in record.item.\n   */\n  add(record:CollectionChangeRecord) {\n    if (this._head === null) {\n      this._head = this._tail = record;\n      record._nextDup = null;\n      record._prevDup = null;\n    } else {\n      // todo(vicb)\n      //assert(record.item ==  _head.item ||\n      //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n      this._tail._nextDup = record;\n      record._prevDup = this._tail;\n      record._nextDup = null;\n      this._tail = record;\n    }\n  }\n\n  // Returns a CollectionChangeRecord having CollectionChangeRecord.item == item and\n  // CollectionChangeRecord.currentIndex >= afterIndex\n  get(item, afterIndex:int):CollectionChangeRecord {\n    var record:CollectionChangeRecord;\n    for (record = this._head; record !== null; record = record._nextDup) {\n      if ((afterIndex === null || afterIndex < record.currentIndex) &&\n           looseIdentical(record.item, item)) {\n          return record;\n        }\n      }\n    return null;\n  }\n\n  /**\n   * Remove one [CollectionChangeRecord] from the list of duplicates.\n   *\n   * Returns whether the list of duplicates is empty.\n   */\n  remove(record:CollectionChangeRecord):boolean {\n    // todo(vicb)\n    //assert(() {\n    //  // verify that the record being removed is in the list.\n    //  for (CollectionChangeRecord cursor = _head; cursor != null; cursor = cursor._nextDup) {\n    //    if (identical(cursor, record)) return true;\n    //  }\n    //  return false;\n    //});\n\n    var prev:CollectionChangeRecord = record._prevDup;\n    var next:CollectionChangeRecord = record._nextDup;\n    if (prev === null) {\n      this._head = next;\n    } else {\n      prev._nextDup = next;\n    }\n    if (next === null) {\n      this._tail = prev;\n    } else {\n      next._prevDup = prev;\n    }\n    return this._head === null;\n  }\n}\n\nclass _DuplicateMap {\n  map:Map;\n  constructor() {\n    this.map = MapWrapper.create();\n  }\n\n  put(record:CollectionChangeRecord) {\n    // todo(vicb) handle corner cases\n    var key = getMapKey(record.item);\n\n    var duplicates = MapWrapper.get(this.map, key);\n    if (!isPresent(duplicates)) {\n      duplicates = new _DuplicateItemRecordList();\n      MapWrapper.set(this.map, key, duplicates);\n    }\n    duplicates.add(record);\n  }\n\n  /**\n   * Retrieve the `value` using key. Because the CollectionChangeRecord value maybe one which we\n   * have already iterated over, we use the afterIndex to pretend it is not there.\n   *\n   * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n   * have any more `a`s needs to return the last `a` not the first or second.\n   */\n  get(value, afterIndex = null):CollectionChangeRecord {\n    var key = getMapKey(value);\n\n    var recordList = MapWrapper.get(this.map, key);\n    return isBlank(recordList) ? null : recordList.get(value, afterIndex);\n  }\n\n  /**\n   * Removes an [CollectionChangeRecord] from the list of duplicates.\n   *\n   * The list of duplicates also is removed from the map if it gets empty.\n   */\n  remove(record:CollectionChangeRecord):CollectionChangeRecord {\n    var key = getMapKey(record.item);\n    // todo(vicb)\n    //assert(this.map.containsKey(key));\n    var recordList:_DuplicateItemRecordList = MapWrapper.get(this.map, key);\n    // Remove the list of duplicates when it gets empty\n    if (recordList.remove(record)) {\n      MapWrapper.delete(this.map, key);\n    }\n    return record;\n  }\n\n  get isEmpty():boolean {\n    return MapWrapper.size(this.map) === 0;\n  }\n\n  clear() {\n    MapWrapper.clear(this.map);\n  }\n\n  toString():string {\n    return '_DuplicateMap(' + stringify(this.map) + ')';\n  }\n}\n","return assert.returnType(($__placeholder__0), $__placeholder__1)","assert.type.$__placeholder__0)","function($__super) {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4, $__super);\n        }($__placeholder__5)","$traceurRuntime.superConstructor($__placeholder__0).call($__placeholder__1)","assert.argumentTypes($__placeholder__0)","assert.type($__placeholder__0, $__placeholder__1)","assert.type.any","assert.type.any","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","$__placeholder__0 = $__placeholder__1","assert.type.any"]}