{"version":3,"sources":["@traceur/generated/TemplateParser/22","angular2/src/facade/lang.es6","angular2/src/facade/@traceur/generated/TemplateParser/9","angular2/src/facade/@traceur/generated/TemplateParser/7","@traceur/generated/TemplateParser/30","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/26","@traceur/generated/TemplateParser/31","@traceur/generated/TemplateParser/24","@traceur/generated/TemplateParser/36","@traceur/generated/TemplateParser/23","@traceur/generated/TemplateParser/27","angular2/src/facade/@traceur/generated/TemplateParser/8","angular2/src/facade/@traceur/generated/TemplateParser/4756","@traceur/generated/TemplateParser/32","angular2/src/facade/@traceur/generated/TemplateParser/10","@traceur/generated/TemplateParser/28","@traceur/generated/TemplateParser/13","angular2/src/facade/@traceur/generated/TemplateParser/389","@traceur/generated/TemplateParser/35","angular2/src/facade/@traceur/generated/TemplateParser/4763","angular2/src/facade/@traceur/generated/TemplateParser/4769","angular2/src/facade/lang.js"],"names":[],"mappings":"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","file":"angular2/src/facade/lang.js","sourceRoot":"/Users/jbisa/ksi/devel/angular2/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","var _global = typeof window === 'undefined' ? global : window;\nexport {_global as global};\n\nexport var Type = Function;\nexport var Math = _global.Math;\nexport var Date = _global.Date;\n\nvar assertionsEnabled_ = typeof assert !== 'undefined';\n\nvar int;\n// global assert support, as Dart has it...\n// TODO: `assert` calls need to be removed in production code!\nif (assertionsEnabled_) {\n  _global.assert = assert;\n  // `int` is not a valid JS type\n  int = assert.define('int', function(value) {\n    return typeof value === 'number' && value%1 === 0;\n  });\n} else {\n  int = {};\n  _global.assert = function() {};\n}\nexport {int};\n\nexport class CONST {}\nexport class ABSTRACT {}\nexport class IMPLEMENTS {}\n\nexport function isPresent(obj):boolean {\n  return obj !== undefined && obj !== null;\n}\n\nexport function isBlank(obj):boolean {\n  return obj === undefined || obj === null;\n}\n\nexport function isString(obj):boolean {\n  return typeof obj === \"string\";\n}\n\nexport function stringify(token):string {\n  if (typeof token === 'string') {\n    return token;\n  }\n\n  if (token === undefined || token === null) {\n    return '' + token;\n  }\n\n  if (token.name) {\n    return token.name;\n  }\n\n  return token.toString();\n}\n\nexport class StringWrapper {\n  static fromCharCode(code:int):string {\n    return String.fromCharCode(code);\n  }\n\n  static charCodeAt(s:string, index:int) {\n    return s.charCodeAt(index);\n  }\n\n  static split(s:string, regExp:RegExp) {\n    return s.split(regExp.multiple);\n  }\n\n  static equals(s:string, s2:string):boolean {\n    return s === s2;\n  }\n\n  static replace(s:string, from , replace:string): string {\n    if (typeof(from) === \"string\") {\n      return s.replace(from, replace);\n    } else {\n      return s.replace(from.single, replace);\n    }\n  }\n\n  static replaceAll(s:string, from:RegExp, replace:string):string {\n    return s.replace(from.multiple, replace);\n  }\n\n  static startsWith(s:string, start:string) {\n    return s.startsWith(start);\n  }\n\n  static substring(s:string, start:int, end:int = null) {\n    return s.substring(start, end === null ? undefined: end);\n  }\n\n  static replaceAllMapped(s:string, from:RegExp, cb:Function): string {\n    return s.replace(from.multiple, function(...matches) {\n      // Remove offset & string from the result array\n      matches.splice(-2, 2);\n      // The callback receives match, p1, ..., pn\n      return cb(matches);\n    });\n  }\n\n  static contains(s:string, substr:string): boolean {\n    return s.indexOf(substr) != -1;\n  }\n}\n\nexport class StringJoiner {\n  constructor() {\n    this.parts = [];\n  }\n\n  add(part:string) {\n    this.parts.push(part);\n  }\n\n  toString():string {\n    return this.parts.join(\"\");\n  }\n}\n\nexport class NumberParseError extends Error {\n  constructor(message) {\n    super();\n    this.message = message;\n  }\n\n  toString() {\n    return this.message;\n  }\n}\n\n\nexport class NumberWrapper {\n  static toFixed(n:number, fractionDigits:int):string {\n    return n.toFixed(fractionDigits);\n  }\n\n  static equal(a, b):boolean {\n    return a === b;\n  }\n\n  static parseIntAutoRadix(text:string):int {\n    var result:int = parseInt(text);\n    if (isNaN(result)) {\n      throw new NumberParseError(\"Invalid integer literal when parsing \" + text);\n    }\n    return result;\n  }\n\n  static parseInt(text:string, radix:int):int {\n    if (radix == 10) {\n      if (/^(\\-|\\+)?[0-9]+$/.test(text)) {\n        return parseInt(text, radix);\n      }\n    } else if (radix == 16) {\n      if (/^(\\-|\\+)?[0-9ABCDEFabcdef]+$/.test(text)) {\n        return parseInt(text, radix);\n      }\n    } else {\n      var result:int = parseInt(text, radix);\n      if (!isNaN(result)) {\n        return result;\n      }\n    }\n    throw new NumberParseError(\"Invalid integer literal when parsing \" + text + \" in base \" + radix);\n  }\n\n  // TODO: NaN is a valid literal but is returned by parseFloat to indicate an error.\n  static parseFloat(text:string):number {\n    return parseFloat(text);\n  }\n\n  static get NaN():number {\n    return NaN;\n  }\n\n  static isNaN(value):boolean {\n    return isNaN(value);\n  }\n\n  static isInteger(value):boolean {\n    return Number.isInteger(value);\n  }\n}\n\nexport var RegExp;\nif (assertionsEnabled_) {\n  RegExp = assert.define('RegExp', function(obj) {\n    assert(obj).is(assert.structure({\n      single: _global.RegExp,\n      multiple: _global.RegExp\n    }));\n  });\n} else {\n  RegExp = {};\n}\n\nexport class RegExpWrapper {\n  static create(regExpStr, flags:string = ''):RegExp {\n    flags = flags.replace(/g/g, '');\n    return {\n      multiple: new _global.RegExp(regExpStr, flags + 'g'),\n      single: new _global.RegExp(regExpStr, flags)\n    };\n  }\n  static firstMatch(regExp, input) {\n    return input.match(regExp.single);\n  }\n  static matcher(regExp, input) {\n    return {\n      re: regExp.multiple,\n      input: input\n    };\n  }\n}\n\nexport class RegExpMatcherWrapper {\n  static next(matcher) {\n    return matcher.re.exec(matcher.input);\n  }\n}\n\nexport class FunctionWrapper {\n  static apply(fn:Function, posArgs) {\n    return fn.apply(null, posArgs);\n  }\n}\n\n// No subclass so that we preserve error stack.\nexport var BaseException = Error;\n\n// JS has NaN !== NaN\nexport function looseIdentical(a, b):boolean {\n  return a === b ||\n         typeof a === \"number\" && typeof b === \"number\" && isNaN(a) && isNaN(b);\n}\n\n// JS considers NaN is the same as NaN for map Key (while NaN !== NaN otherwise)\n// see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\nexport function getMapKey(value) {\n  return value;\n}\n\nexport function normalizeBlank(obj) {\n  return isBlank(obj) ? null : obj;\n}\n\nexport function isJsObject(o):boolean {\n  return o !== null && (typeof o === \"function\" || typeof o === \"object\");\n}\n\nexport function assertionsEnabled():boolean {\n  return assertionsEnabled_;\n}\n\nexport function print(obj) {\n  if (obj instanceof Error) {\n    console.log(obj.stack);\n  } else {\n    console.log(obj);\n  }\n}\n\n// Can't be all uppercase as our transpiler would think it is a special directive...\nexport var Json = _global.JSON;\n\nexport class DateWrapper {\n  static fromMillis(ms) {\n    return new Date(ms);\n  }\n  static toMillis(date:Date) {\n    return date.getTime();\n  }\n  static now() {\n    return new Date();\n  }\n  static toJson(date) {\n    return date.toJSON();\n  }\n}\n","return assert.returnType(($__placeholder__0), $__placeholder__1)","assert.type.$__placeholder__0)","\n        $__export($__placeholder__0, $__placeholder__1)\n      ","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","$__export($__placeholder__0, $__placeholder__1);","$__export($__placeholder__0, $__placeholder__1)","$__export($__placeholder__0, $__placeholder__1)}","var $__placeholder__0 = $__export($__placeholder__1, $__placeholder__2);","function() {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4);\n        }()","assert.argumentTypes($__placeholder__0)","assert.type.any","\n            for (var $__placeholder__0 = [], $__placeholder__1 = 0;\n                 $__placeholder__2 < arguments.length; $__placeholder__3++)\n              $__placeholder__4[$__placeholder__5] = arguments[$__placeholder__6];","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","function($__super) {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4, $__super);\n        }($__placeholder__5)","$traceurRuntime.superConstructor($__placeholder__0).call($__placeholder__1)","assert.type($__placeholder__0, $__placeholder__1)","$__export($__placeholder__0, $__placeholder__1)","assert.type.any","assert.type.any","import {assert} from \"rtts_assert/rtts_assert\";\nvar _global = typeof window === 'undefined' ? global : window;\nexport {_global as global};\nexport var Type = Function;\nexport var Math = _global.Math;\nexport var Date = _global.Date;\nvar assertionsEnabled_ = typeof assert !== 'undefined';\nvar int;\nif (assertionsEnabled_) {\n  _global.assert = assert;\n  int = assert.define('int', function(value) {\n    return typeof value === 'number' && value % 1 === 0;\n  });\n} else {\n  int = {};\n  _global.assert = function() {};\n}\nexport {int};\nexport class CONST {}\nexport class ABSTRACT {}\nexport class IMPLEMENTS {}\nexport function isPresent(obj) {\n  return assert.returnType((obj !== undefined && obj !== null), assert.type.boolean);\n}\nexport function isBlank(obj) {\n  return assert.returnType((obj === undefined || obj === null), assert.type.boolean);\n}\nexport function isString(obj) {\n  return assert.returnType((typeof obj === \"string\"), assert.type.boolean);\n}\nexport function stringify(token) {\n  if (typeof token === 'string') {\n    return assert.returnType((token), assert.type.string);\n  }\n  if (token === undefined || token === null) {\n    return assert.returnType(('' + token), assert.type.string);\n  }\n  if (token.name) {\n    return assert.returnType((token.name), assert.type.string);\n  }\n  return assert.returnType((token.toString()), assert.type.string);\n}\nexport class StringWrapper {\n  static fromCharCode(code) {\n    assert.argumentTypes(code, int);\n    return assert.returnType((String.fromCharCode(code)), assert.type.string);\n  }\n  static charCodeAt(s, index) {\n    assert.argumentTypes(s, assert.type.string, index, int);\n    return s.charCodeAt(index);\n  }\n  static split(s, regExp) {\n    assert.argumentTypes(s, assert.type.string, regExp, RegExp);\n    return s.split(regExp.multiple);\n  }\n  static equals(s, s2) {\n    assert.argumentTypes(s, assert.type.string, s2, assert.type.string);\n    return assert.returnType((s === s2), assert.type.boolean);\n  }\n  static replace(s, from, replace) {\n    assert.argumentTypes(s, assert.type.string, from, assert.type.any, replace, assert.type.string);\n    if (typeof(from) === \"string\") {\n      return assert.returnType((s.replace(from, replace)), assert.type.string);\n    } else {\n      return assert.returnType((s.replace(from.single, replace)), assert.type.string);\n    }\n  }\n  static replaceAll(s, from, replace) {\n    assert.argumentTypes(s, assert.type.string, from, RegExp, replace, assert.type.string);\n    return assert.returnType((s.replace(from.multiple, replace)), assert.type.string);\n  }\n  static startsWith(s, start) {\n    assert.argumentTypes(s, assert.type.string, start, assert.type.string);\n    return s.startsWith(start);\n  }\n  static substring(s, start, end = null) {\n    assert.argumentTypes(s, assert.type.string, start, int, end, int);\n    return s.substring(start, end === null ? undefined : end);\n  }\n  static replaceAllMapped(s, from, cb) {\n    assert.argumentTypes(s, assert.type.string, from, RegExp, cb, Function);\n    return assert.returnType((s.replace(from.multiple, function(...matches) {\n      matches.splice(-2, 2);\n      return cb(matches);\n    })), assert.type.string);\n  }\n  static contains(s, substr) {\n    assert.argumentTypes(s, assert.type.string, substr, assert.type.string);\n    return assert.returnType((s.indexOf(substr) != -1), assert.type.boolean);\n  }\n}\nObject.defineProperty(StringWrapper.fromCharCode, \"parameters\", {get: function() {\n    return [[int]];\n  }});\nObject.defineProperty(StringWrapper.charCodeAt, \"parameters\", {get: function() {\n    return [[assert.type.string], [int]];\n  }});\nObject.defineProperty(StringWrapper.split, \"parameters\", {get: function() {\n    return [[assert.type.string], [RegExp]];\n  }});\nObject.defineProperty(StringWrapper.equals, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string]];\n  }});\nObject.defineProperty(StringWrapper.replace, \"parameters\", {get: function() {\n    return [[assert.type.string], [], [assert.type.string]];\n  }});\nObject.defineProperty(StringWrapper.replaceAll, \"parameters\", {get: function() {\n    return [[assert.type.string], [RegExp], [assert.type.string]];\n  }});\nObject.defineProperty(StringWrapper.startsWith, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string]];\n  }});\nObject.defineProperty(StringWrapper.substring, \"parameters\", {get: function() {\n    return [[assert.type.string], [int], [int]];\n  }});\nObject.defineProperty(StringWrapper.replaceAllMapped, \"parameters\", {get: function() {\n    return [[assert.type.string], [RegExp], [Function]];\n  }});\nObject.defineProperty(StringWrapper.contains, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string]];\n  }});\nexport class StringJoiner {\n  constructor() {\n    this.parts = [];\n  }\n  add(part) {\n    assert.argumentTypes(part, assert.type.string);\n    this.parts.push(part);\n  }\n  toString() {\n    return assert.returnType((this.parts.join(\"\")), assert.type.string);\n  }\n}\nObject.defineProperty(StringJoiner.prototype.add, \"parameters\", {get: function() {\n    return [[assert.type.string]];\n  }});\nexport class NumberParseError extends Error {\n  constructor(message) {\n    super();\n    this.message = message;\n  }\n  toString() {\n    return this.message;\n  }\n}\nexport class NumberWrapper {\n  static toFixed(n, fractionDigits) {\n    assert.argumentTypes(n, assert.type.number, fractionDigits, int);\n    return assert.returnType((n.toFixed(fractionDigits)), assert.type.string);\n  }\n  static equal(a, b) {\n    return assert.returnType((a === b), assert.type.boolean);\n  }\n  static parseIntAutoRadix(text) {\n    assert.argumentTypes(text, assert.type.string);\n    var result = assert.type(parseInt(text), int);\n    if (isNaN(result)) {\n      throw new NumberParseError(\"Invalid integer literal when parsing \" + text);\n    }\n    return assert.returnType((result), int);\n  }\n  static parseInt(text, radix) {\n    assert.argumentTypes(text, assert.type.string, radix, int);\n    if (radix == 10) {\n      if (/^(\\-|\\+)?[0-9]+$/.test(text)) {\n        return assert.returnType((parseInt(text, radix)), int);\n      }\n    } else if (radix == 16) {\n      if (/^(\\-|\\+)?[0-9ABCDEFabcdef]+$/.test(text)) {\n        return assert.returnType((parseInt(text, radix)), int);\n      }\n    } else {\n      var result = assert.type(parseInt(text, radix), int);\n      if (!isNaN(result)) {\n        return assert.returnType((result), int);\n      }\n    }\n    throw new NumberParseError(\"Invalid integer literal when parsing \" + text + \" in base \" + radix);\n  }\n  static parseFloat(text) {\n    assert.argumentTypes(text, assert.type.string);\n    return assert.returnType((parseFloat(text)), assert.type.number);\n  }\n  static get NaN() {\n    return assert.returnType((NaN), assert.type.number);\n  }\n  static isNaN(value) {\n    return assert.returnType((isNaN(value)), assert.type.boolean);\n  }\n  static isInteger(value) {\n    return assert.returnType((Number.isInteger(value)), assert.type.boolean);\n  }\n}\nObject.defineProperty(NumberWrapper.toFixed, \"parameters\", {get: function() {\n    return [[assert.type.number], [int]];\n  }});\nObject.defineProperty(NumberWrapper.parseIntAutoRadix, \"parameters\", {get: function() {\n    return [[assert.type.string]];\n  }});\nObject.defineProperty(NumberWrapper.parseInt, \"parameters\", {get: function() {\n    return [[assert.type.string], [int]];\n  }});\nObject.defineProperty(NumberWrapper.parseFloat, \"parameters\", {get: function() {\n    return [[assert.type.string]];\n  }});\nexport var RegExp;\nif (assertionsEnabled_) {\n  RegExp = assert.define('RegExp', function(obj) {\n    assert(obj).is(assert.structure({\n      single: _global.RegExp,\n      multiple: _global.RegExp\n    }));\n  });\n} else {\n  RegExp = {};\n}\nexport class RegExpWrapper {\n  static create(regExpStr, flags = '') {\n    assert.argumentTypes(regExpStr, assert.type.any, flags, assert.type.string);\n    flags = flags.replace(/g/g, '');\n    return assert.returnType(({\n      multiple: new _global.RegExp(regExpStr, flags + 'g'),\n      single: new _global.RegExp(regExpStr, flags)\n    }), RegExp);\n  }\n  static firstMatch(regExp, input) {\n    return input.match(regExp.single);\n  }\n  static matcher(regExp, input) {\n    return {\n      re: regExp.multiple,\n      input: input\n    };\n  }\n}\nObject.defineProperty(RegExpWrapper.create, \"parameters\", {get: function() {\n    return [[], [assert.type.string]];\n  }});\nexport class RegExpMatcherWrapper {\n  static next(matcher) {\n    return matcher.re.exec(matcher.input);\n  }\n}\nexport class FunctionWrapper {\n  static apply(fn, posArgs) {\n    assert.argumentTypes(fn, Function, posArgs, assert.type.any);\n    return fn.apply(null, posArgs);\n  }\n}\nObject.defineProperty(FunctionWrapper.apply, \"parameters\", {get: function() {\n    return [[Function], []];\n  }});\nexport var BaseException = Error;\nexport function looseIdentical(a, b) {\n  return assert.returnType((a === b || typeof a === \"number\" && typeof b === \"number\" && isNaN(a) && isNaN(b)), assert.type.boolean);\n}\nexport function getMapKey(value) {\n  return value;\n}\nexport function normalizeBlank(obj) {\n  return isBlank(obj) ? null : obj;\n}\nexport function isJsObject(o) {\n  return assert.returnType((o !== null && (typeof o === \"function\" || typeof o === \"object\")), assert.type.boolean);\n}\nexport function assertionsEnabled() {\n  return assert.returnType((assertionsEnabled_), assert.type.boolean);\n}\nexport function print(obj) {\n  if (obj instanceof Error) {\n    console.log(obj.stack);\n  } else {\n    console.log(obj);\n  }\n}\nexport var Json = _global.JSON;\nexport class DateWrapper {\n  static fromMillis(ms) {\n    return new Date(ms);\n  }\n  static toMillis(date) {\n    assert.argumentTypes(date, Date);\n    return date.getTime();\n  }\n  static now() {\n    return new Date();\n  }\n  static toJson(date) {\n    return date.toJSON();\n  }\n}\nObject.defineProperty(DateWrapper.toMillis, \"parameters\", {get: function() {\n    return [[Date]];\n  }});\n\n//# sourceMappingURL=/Users/jbisa/ksi/devel/angular2/modules/angular2/src/facade/lang.map\n\n//# sourceMappingURL=./lang.map"]}