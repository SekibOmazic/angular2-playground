{"version":3,"sources":["@traceur/generated/TemplateParser/22","angular2/src/facade/collection.es6","angular2/src/facade/@traceur/generated/TemplateParser/9","angular2/src/facade/@traceur/generated/TemplateParser/7","angular2/src/facade/@traceur/generated/TemplateParser/8","angular2/src/facade/@traceur/generated/TemplateParser/4551","@traceur/generated/TemplateParser/30","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/26","@traceur/generated/TemplateParser/24","@traceur/generated/TemplateParser/23","@traceur/generated/TemplateParser/27","@traceur/generated/TemplateParser/16","angular2/src/facade/@traceur/generated/TemplateParser/10","angular2/src/facade/@traceur/generated/TemplateParser/4531","angular2/src/facade/@traceur/generated/TemplateParser/4532","angular2/src/facade/@traceur/generated/TemplateParser/4533","angular2/src/facade/@traceur/generated/TemplateParser/4538","angular2/src/facade/@traceur/generated/TemplateParser/4539","angular2/src/facade/@traceur/generated/TemplateParser/4540","angular2/src/facade/@traceur/generated/TemplateParser/4549","angular2/src/facade/@traceur/generated/TemplateParser/4552","angular2/src/facade/collection.js"],"names":[],"mappings":"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","file":"angular2/src/facade/collection.js","sourceRoot":"/Users/jbisa/ksi/devel/angular2/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","import {int, isJsObject, global} from 'angular2/src/facade/lang';\n\nexport var List = global.Array;\nexport var Map = global.Map;\nexport var Set = global.Set;\nexport var StringMap = global.Object;\n\nexport class MapWrapper {\n  static create():Map { return new Map(); }\n  static clone(m:Map):Map { return new Map(m); }\n  static createFromStringMap(stringMap):Map {\n    var result = MapWrapper.create();\n    for (var prop in stringMap) {\n      MapWrapper.set(result, prop, stringMap[prop]);\n    }\n    return result;\n  }\n  static createFromPairs(pairs:List):Map {return new Map(pairs);}\n  static get(m, k) { return m.get(k); }\n  static set(m, k, v) { m.set(k,v); }\n  static contains(m, k) { return  m.has(k); }\n  static forEach(m, fn) {\n    m.forEach(fn);\n  }\n  static size(m) {return m.size;}\n  static delete(m, k) { m.delete(k); }\n  static clear(m) { m.clear(); }\n  static clearValues(m) {\n    var keyIterator = m.keys();\n    var k;\n    while (!((k = keyIterator.next()).done)) {\n      m.set(k.value, null);\n    }\n  }\n  static iterable(m) { return m; }\n  static keys(m) { return m.keys(); }\n  static values(m) { return m.values(); }\n}\n\n/**\n * Wraps Javascript Objects\n */\nexport class StringMapWrapper {\n  static create():Object {\n    // Note: We are not using Object.create(null) here due to\n    // performance!\n    // http://jsperf.com/ng2-object-create-null\n    return { };\n  }\n  static contains(map, key) {\n    return map.hasOwnProperty(key);\n  }\n  static get(map, key) {\n    return map.hasOwnProperty(key) ? map[key] : undefined;\n  }\n  static set(map, key, value) {\n    map[key] = value;\n  }\n  static isEmpty(map) {\n    for (var prop in map) {\n      return false;\n    }\n    return true;\n  }\n  static forEach(map, callback) {\n    for (var prop in map) {\n      if (map.hasOwnProperty(prop)) {\n        callback(map[prop], prop);\n      }\n    }\n  }\n\n  static merge(m1, m2) {\n    var m = {};\n\n    for (var attr in m1) {\n      if (m1.hasOwnProperty(attr)){\n        m[attr] = m1[attr];\n      }\n    }\n\n    for (var attr in m2) {\n      if (m2.hasOwnProperty(attr)){\n        m[attr] = m2[attr];\n      }\n    }\n\n    return m;\n  }\n}\n\nexport class ListWrapper {\n  static create():List { return new List(); }\n  static createFixedSize(size):List { return new List(size); }\n  static get(m, k) { return m[k]; }\n  static set(m, k, v) { m[k] = v; }\n  static clone(array:List) {\n    return array.slice(0);\n  }\n  static map(array, fn) {\n    return array.map(fn);\n  }\n  static forEach(array:List, fn:Function) {\n    for (var i = 0; i < array.length; i++) {\n      fn(array[i]);\n    }\n  }\n  static push(array, el) {\n    array.push(el);\n  }\n  static first(array) {\n    if (!array) return null;\n    return array[0];\n  }\n  static last(array) {\n    if (!array || array.length == 0) return null;\n    return array[array.length - 1];\n  }\n  static find(list:List, pred:Function) {\n    for (var i = 0 ; i < list.length; ++i) {\n      if (pred(list[i])) return list[i];\n    }\n    return null;\n  }\n  static reduce(list:List, fn:Function, init) {\n    return list.reduce(fn, init);\n  }\n  static filter(array, pred:Function) {\n    return array.filter(pred);\n  }\n  static any(list:List, pred:Function) {\n    for (var i = 0 ; i < list.length; ++i) {\n      if (pred(list[i])) return true;\n    }\n    return false;\n  }\n  static contains(list:List, el) {\n    return list.indexOf(el) !== -1;\n  }\n  static reversed(array) {\n    var a = ListWrapper.clone(array);\n    return a.reverse();\n  }\n  static concat(a, b) {return a.concat(b);}\n  static isList(list) {\n    return Array.isArray(list);\n  }\n  static insert(list, index:int, value) {\n    list.splice(index, 0, value);\n  }\n  static removeAt(list, index:int) {\n    var res = list[index];\n    list.splice(index, 1);\n    return res;\n  }\n  static removeAll(list, items) {\n    for (var i = 0; i < items.length; ++i) {\n      var index = list.indexOf(items[i]);\n      list.splice(index, 1);\n    }\n  }\n  static removeLast(list:List) {\n    return list.pop();\n  }\n  static remove(list, el): boolean {\n    var index = list.indexOf(el);\n    if (index > -1) {\n      list.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n  static clear(list) {\n    list.splice(0, list.length);\n  }\n  static join(list, s) {\n    return list.join(s);\n  }\n  static isEmpty(list) {\n    return list.length == 0;\n  }\n  static fill(list:List, value, start:int = 0, end:int = null) {\n    list.fill(value, start, end === null ? undefined: end);\n  }\n  static equals(a:List, b:List):boolean {\n    if(a.length != b.length) return false;\n    for (var i = 0; i < a.length; ++i) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n  static slice(l:List, from:int, to:int):List {\n    return l.slice(from, to);\n  }\n  static sort(l:List, compareFn:Function) {\n    l.sort(compareFn);\n  }\n}\n\nexport function isListLikeIterable(obj):boolean {\n  if (!isJsObject(obj)) return false;\n  return ListWrapper.isList(obj) ||\n         (!(obj instanceof Map) &&  // JS Map are iterables but return entries as [k, v]\n         Symbol.iterator in obj);   // JS Iterable have a Symbol.iterator prop\n}\n\nexport function iterateListLike(obj, fn:Function) {\n  if (ListWrapper.isList(obj)) {\n    for (var i = 0; i < obj.length; i++) {\n      fn(obj[i]);\n    }\n  } else {\n    var iterator = obj[Symbol.iterator]();\n    var item;\n    while (!((item = iterator.next()).done)) {\n      fn(item.value);\n    }\n  }\n}\n\nexport class SetWrapper {\n  static createFromList(lst:List) { return new Set(lst); }\n  static has(s:Set, key):boolean { return s.has(key); }\n}\n","return assert.returnType(($__placeholder__0), $__placeholder__1)","assert.type.$__placeholder__0)","assert.argumentTypes($__placeholder__0)","assert.type.any","\n        $__export($__placeholder__0, $__placeholder__1)\n      ","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","$__export($__placeholder__0, $__placeholder__1)","var $__placeholder__0 = $__export($__placeholder__1, $__placeholder__2);","function() {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4);\n        }()","void 0","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.type.any","assert.type.any","assert.type.any","assert.type.any","assert.type.any","assert.type.any","assert.type.any","assert.type.any","import {assert} from \"rtts_assert/rtts_assert\";\nimport {int,\n  isJsObject,\n  global} from 'angular2/src/facade/lang';\nexport var List = global.Array;\nexport var Map = global.Map;\nexport var Set = global.Set;\nexport var StringMap = global.Object;\nexport class MapWrapper {\n  static create() {\n    return assert.returnType((new Map()), Map);\n  }\n  static clone(m) {\n    assert.argumentTypes(m, Map);\n    return assert.returnType((new Map(m)), Map);\n  }\n  static createFromStringMap(stringMap) {\n    var result = MapWrapper.create();\n    for (var prop in stringMap) {\n      MapWrapper.set(result, prop, stringMap[prop]);\n    }\n    return assert.returnType((result), Map);\n  }\n  static createFromPairs(pairs) {\n    assert.argumentTypes(pairs, List);\n    return assert.returnType((new Map(pairs)), Map);\n  }\n  static get(m, k) {\n    return m.get(k);\n  }\n  static set(m, k, v) {\n    m.set(k, v);\n  }\n  static contains(m, k) {\n    return m.has(k);\n  }\n  static forEach(m, fn) {\n    m.forEach(fn);\n  }\n  static size(m) {\n    return m.size;\n  }\n  static delete(m, k) {\n    m.delete(k);\n  }\n  static clear(m) {\n    m.clear();\n  }\n  static clearValues(m) {\n    var keyIterator = m.keys();\n    var k;\n    while (!((k = keyIterator.next()).done)) {\n      m.set(k.value, null);\n    }\n  }\n  static iterable(m) {\n    return m;\n  }\n  static keys(m) {\n    return m.keys();\n  }\n  static values(m) {\n    return m.values();\n  }\n}\nObject.defineProperty(MapWrapper.clone, \"parameters\", {get: function() {\n    return [[Map]];\n  }});\nObject.defineProperty(MapWrapper.createFromPairs, \"parameters\", {get: function() {\n    return [[List]];\n  }});\nexport class StringMapWrapper {\n  static create() {\n    return assert.returnType(({}), Object);\n  }\n  static contains(map, key) {\n    return map.hasOwnProperty(key);\n  }\n  static get(map, key) {\n    return map.hasOwnProperty(key) ? map[key] : undefined;\n  }\n  static set(map, key, value) {\n    map[key] = value;\n  }\n  static isEmpty(map) {\n    for (var prop in map) {\n      return false;\n    }\n    return true;\n  }\n  static forEach(map, callback) {\n    for (var prop in map) {\n      if (map.hasOwnProperty(prop)) {\n        callback(map[prop], prop);\n      }\n    }\n  }\n  static merge(m1, m2) {\n    var m = {};\n    for (var attr in m1) {\n      if (m1.hasOwnProperty(attr)) {\n        m[attr] = m1[attr];\n      }\n    }\n    for (var attr in m2) {\n      if (m2.hasOwnProperty(attr)) {\n        m[attr] = m2[attr];\n      }\n    }\n    return m;\n  }\n}\nexport class ListWrapper {\n  static create() {\n    return assert.returnType((new List()), List);\n  }\n  static createFixedSize(size) {\n    return assert.returnType((new List(size)), List);\n  }\n  static get(m, k) {\n    return m[k];\n  }\n  static set(m, k, v) {\n    m[k] = v;\n  }\n  static clone(array) {\n    assert.argumentTypes(array, List);\n    return array.slice(0);\n  }\n  static map(array, fn) {\n    return array.map(fn);\n  }\n  static forEach(array, fn) {\n    assert.argumentTypes(array, List, fn, Function);\n    for (var i = 0; i < array.length; i++) {\n      fn(array[i]);\n    }\n  }\n  static push(array, el) {\n    array.push(el);\n  }\n  static first(array) {\n    if (!array)\n      return null;\n    return array[0];\n  }\n  static last(array) {\n    if (!array || array.length == 0)\n      return null;\n    return array[array.length - 1];\n  }\n  static find(list, pred) {\n    assert.argumentTypes(list, List, pred, Function);\n    for (var i = 0; i < list.length; ++i) {\n      if (pred(list[i]))\n        return list[i];\n    }\n    return null;\n  }\n  static reduce(list, fn, init) {\n    assert.argumentTypes(list, List, fn, Function, init, assert.type.any);\n    return list.reduce(fn, init);\n  }\n  static filter(array, pred) {\n    assert.argumentTypes(array, assert.type.any, pred, Function);\n    return array.filter(pred);\n  }\n  static any(list, pred) {\n    assert.argumentTypes(list, List, pred, Function);\n    for (var i = 0; i < list.length; ++i) {\n      if (pred(list[i]))\n        return true;\n    }\n    return false;\n  }\n  static contains(list, el) {\n    assert.argumentTypes(list, List, el, assert.type.any);\n    return list.indexOf(el) !== -1;\n  }\n  static reversed(array) {\n    var a = ListWrapper.clone(array);\n    return a.reverse();\n  }\n  static concat(a, b) {\n    return a.concat(b);\n  }\n  static isList(list) {\n    return Array.isArray(list);\n  }\n  static insert(list, index, value) {\n    assert.argumentTypes(list, assert.type.any, index, int, value, assert.type.any);\n    list.splice(index, 0, value);\n  }\n  static removeAt(list, index) {\n    assert.argumentTypes(list, assert.type.any, index, int);\n    var res = list[index];\n    list.splice(index, 1);\n    return res;\n  }\n  static removeAll(list, items) {\n    for (var i = 0; i < items.length; ++i) {\n      var index = list.indexOf(items[i]);\n      list.splice(index, 1);\n    }\n  }\n  static removeLast(list) {\n    assert.argumentTypes(list, List);\n    return list.pop();\n  }\n  static remove(list, el) {\n    var index = list.indexOf(el);\n    if (index > -1) {\n      list.splice(index, 1);\n      return assert.returnType((true), assert.type.boolean);\n    }\n    return assert.returnType((false), assert.type.boolean);\n  }\n  static clear(list) {\n    list.splice(0, list.length);\n  }\n  static join(list, s) {\n    return list.join(s);\n  }\n  static isEmpty(list) {\n    return list.length == 0;\n  }\n  static fill(list, value, start = 0, end = null) {\n    assert.argumentTypes(list, List, value, assert.type.any, start, int, end, int);\n    list.fill(value, start, end === null ? undefined : end);\n  }\n  static equals(a, b) {\n    assert.argumentTypes(a, List, b, List);\n    if (a.length != b.length)\n      return assert.returnType((false), assert.type.boolean);\n    for (var i = 0; i < a.length; ++i) {\n      if (a[i] !== b[i])\n        return assert.returnType((false), assert.type.boolean);\n    }\n    return assert.returnType((true), assert.type.boolean);\n  }\n  static slice(l, from, to) {\n    assert.argumentTypes(l, List, from, int, to, int);\n    return assert.returnType((l.slice(from, to)), List);\n  }\n  static sort(l, compareFn) {\n    assert.argumentTypes(l, List, compareFn, Function);\n    l.sort(compareFn);\n  }\n}\nObject.defineProperty(ListWrapper.clone, \"parameters\", {get: function() {\n    return [[List]];\n  }});\nObject.defineProperty(ListWrapper.forEach, \"parameters\", {get: function() {\n    return [[List], [Function]];\n  }});\nObject.defineProperty(ListWrapper.find, \"parameters\", {get: function() {\n    return [[List], [Function]];\n  }});\nObject.defineProperty(ListWrapper.reduce, \"parameters\", {get: function() {\n    return [[List], [Function], []];\n  }});\nObject.defineProperty(ListWrapper.filter, \"parameters\", {get: function() {\n    return [[], [Function]];\n  }});\nObject.defineProperty(ListWrapper.any, \"parameters\", {get: function() {\n    return [[List], [Function]];\n  }});\nObject.defineProperty(ListWrapper.contains, \"parameters\", {get: function() {\n    return [[List], []];\n  }});\nObject.defineProperty(ListWrapper.insert, \"parameters\", {get: function() {\n    return [[], [int], []];\n  }});\nObject.defineProperty(ListWrapper.removeAt, \"parameters\", {get: function() {\n    return [[], [int]];\n  }});\nObject.defineProperty(ListWrapper.removeLast, \"parameters\", {get: function() {\n    return [[List]];\n  }});\nObject.defineProperty(ListWrapper.fill, \"parameters\", {get: function() {\n    return [[List], [], [int], [int]];\n  }});\nObject.defineProperty(ListWrapper.equals, \"parameters\", {get: function() {\n    return [[List], [List]];\n  }});\nObject.defineProperty(ListWrapper.slice, \"parameters\", {get: function() {\n    return [[List], [int], [int]];\n  }});\nObject.defineProperty(ListWrapper.sort, \"parameters\", {get: function() {\n    return [[List], [Function]];\n  }});\nexport function isListLikeIterable(obj) {\n  if (!isJsObject(obj))\n    return assert.returnType((false), assert.type.boolean);\n  return assert.returnType((ListWrapper.isList(obj) || (!(obj instanceof Map) && Symbol.iterator in obj)), assert.type.boolean);\n}\nexport function iterateListLike(obj, fn) {\n  assert.argumentTypes(obj, assert.type.any, fn, Function);\n  if (ListWrapper.isList(obj)) {\n    for (var i = 0; i < obj.length; i++) {\n      fn(obj[i]);\n    }\n  } else {\n    var iterator = obj[Symbol.iterator]();\n    var item;\n    while (!((item = iterator.next()).done)) {\n      fn(item.value);\n    }\n  }\n}\nObject.defineProperty(iterateListLike, \"parameters\", {get: function() {\n    return [[], [Function]];\n  }});\nexport class SetWrapper {\n  static createFromList(lst) {\n    assert.argumentTypes(lst, List);\n    return new Set(lst);\n  }\n  static has(s, key) {\n    assert.argumentTypes(s, Set, key, assert.type.any);\n    return assert.returnType((s.has(key)), assert.type.boolean);\n  }\n}\nObject.defineProperty(SetWrapper.createFromList, \"parameters\", {get: function() {\n    return [[List]];\n  }});\nObject.defineProperty(SetWrapper.has, \"parameters\", {get: function() {\n    return [[Set], []];\n  }});\n\n//# sourceMappingURL=/Users/jbisa/ksi/devel/angular2/modules/angular2/src/facade/collection.map\n\n//# sourceMappingURL=./collection.map"]}